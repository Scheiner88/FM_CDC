
CubeMX_FM_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a8  080080a8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b0  080080b0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          0000217c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002278  20002278  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc54  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003253  00000000  00000000  0002fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00032fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00033db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023934  00000000  00000000  00034a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103ec  00000000  00000000  0005833c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9432  00000000  00000000  00068728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131b5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035d4  00000000  00000000  00131bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008028 	.word	0x08008028

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008028 	.word	0x08008028

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f966 	bl	80007a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  FMSTR_Init();
 80004d4:	f004 fa38 	bl	8004948 <FMSTR_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f870 	bl	80005c0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f007 f85c 	bl	800759c <MX_USB_DEVICE_Init>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

    HAL_Delay(500);
    */

    FMSTR_Poll();
 80004e4:	f005 f88c 	bl	8005600 <FMSTR_Poll>
 80004e8:	e7fc      	b.n	80004e4 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f007 fd8c 	bl	8008018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800055c:	2308      	movs	r3, #8
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000560:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4618      	mov	r0, r3
 8000574:	f001 feee 	bl	8002354 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057e:	f000 f871 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2105      	movs	r1, #5
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f94f 	bl	8002844 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f85a 	bl	8000664 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_GPIO_Init+0x9c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <MX_GPIO_Init+0x9c>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0x9c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0x9c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <MX_GPIO_Init+0x9c>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_GPIO_Init+0x9c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <MX_GPIO_Init+0x9c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0xa0>)
 8000632:	f000 fbf9 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0xa0>)
 8000650:	f000 fa4e 	bl	8000af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <HAL_MspInit+0x4c>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x4c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6413      	str	r3, [r2, #64]	; 0x40
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f89a 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <OTG_FS_IRQHandler+0x10>)
 800071a:	f000 fcee 	bl	80010fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20001b4c 	.word	0x20001b4c

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000752:	490e      	ldr	r1, [pc, #56]	; (800078c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000768:	4c0b      	ldr	r4, [pc, #44]	; (8000798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000776:	f7ff ffd7 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f007 fc29 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077e:	f7ff fea5 	bl	80004cc <main>
  bx  lr    
 8000782:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000790:	080080b8 	.word	0x080080b8
  ldr r2, =_sbss
 8000794:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000798:	20002278 	.word	0x20002278

0800079c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_Init+0x40>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_Init+0x40>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_Init+0x40>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f94f 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 f808 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff ff4c 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x54>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f967 	bl	8000ad6 <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f92f 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_InitTick+0x5c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	20000004 	.word	0x20000004

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008
 8000868:	20000118 	.word	0x20000118

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000118 	.word	0x20000118

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff ffee 	bl	800086c <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_Delay+0x44>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffde 	bl	800086c <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <__NVIC_EnableIRQ+0x38>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff29 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff3e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff31 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa2 	bl	8000a28 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	e16b      	b.n	8000de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 815a 	bne.w	8000dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d130      	bne.n	8000ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	f003 0201 	and.w	r2, r3, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d017      	beq.n	8000be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d123      	bne.n	8000c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	69b9      	ldr	r1, [r7, #24]
 8000c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0203 	and.w	r2, r3, #3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80b4 	beq.w	8000dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a5f      	ldr	r2, [pc, #380]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c92:	4a5b      	ldr	r2, [pc, #364]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <HAL_GPIO_Init+0x314>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d02b      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <HAL_GPIO_Init+0x318>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d025      	beq.n	8000d12 <HAL_GPIO_Init+0x222>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <HAL_GPIO_Init+0x31c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d01f      	beq.n	8000d0e <HAL_GPIO_Init+0x21e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x320>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d019      	beq.n	8000d0a <HAL_GPIO_Init+0x21a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <HAL_GPIO_Init+0x324>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0x216>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4d      	ldr	r2, [pc, #308]	; (8000e18 <HAL_GPIO_Init+0x328>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00d      	beq.n	8000d02 <HAL_GPIO_Init+0x212>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	; (8000e1c <HAL_GPIO_Init+0x32c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <HAL_GPIO_Init+0x20e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4b      	ldr	r2, [pc, #300]	; (8000e20 <HAL_GPIO_Init+0x330>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_GPIO_Init+0x20a>
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	e00e      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	e00c      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000cfe:	2306      	movs	r3, #6
 8000d00:	e00a      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e008      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e004      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d16:	2300      	movs	r3, #0
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	f002 0203 	and.w	r2, r2, #3
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4093      	lsls	r3, r2
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d36:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d5a:	4a32      	ldr	r2, [pc, #200]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	f67f ae90 	bls.w	8000b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40021400 	.word	0x40021400
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	40021c00 	.word	0x40021c00
 8000e24:	40013c00 	.word	0x40013c00

08000e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e38:	787b      	ldrb	r3, [r7, #1]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e44:	e003      	b.n	8000e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	041a      	lsls	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	619a      	str	r2, [r3, #24]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5c:	b08f      	sub	sp, #60	; 0x3c
 8000e5e:	af0a      	add	r7, sp, #40	; 0x28
 8000e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e10f      	b.n	800108c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d106      	bne.n	8000e8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f006 fd8e 	bl	80079a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ffd7 	bl	8002e5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	687e      	ldr	r6, [r7, #4]
 8000eb8:	466d      	mov	r5, sp
 8000eba:	f106 0410 	add.w	r4, r6, #16
 8000ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ece:	1d33      	adds	r3, r6, #4
 8000ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f001 feae 	bl	8002c34 <USB_CoreInit>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e0d0      	b.n	800108c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 ffc5 	bl	8002e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e04a      	b.n	8000f92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	333d      	adds	r3, #61	; 0x3d
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	333c      	adds	r3, #60	; 0x3c
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	b298      	uxth	r0, r3
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	3344      	adds	r3, #68	; 0x44
 8000f38:	4602      	mov	r2, r0
 8000f3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3340      	adds	r3, #64	; 0x40
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3348      	adds	r3, #72	; 0x48
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	334c      	adds	r3, #76	; 0x4c
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3354      	adds	r3, #84	; 0x54
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3af      	bcc.n	8000efc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e044      	b.n	800102c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3b5      	bcc.n	8000fa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	687e      	ldr	r6, [r7, #4]
 800103e:	466d      	mov	r5, sp
 8001040:	f106 0410 	add.w	r4, r6, #16
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001050:	e885 0003 	stmia.w	r5, {r0, r1}
 8001054:	1d33      	adds	r3, r6, #4
 8001056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f001 ff5d 	bl	8002f18 <USB_DevInit>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00d      	b.n	800108c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 f8ac 	bl	80041e2 <USB_DevDisconnect>

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001094 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_PCD_Start+0x1c>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e020      	b.n	80010f2 <HAL_PCD_Start+0x5e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d109      	bne.n	80010d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 feaf 	bl	8002e3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f85c 	bl	80041a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fa:	b590      	push	{r4, r7, lr}
 80010fc:	b08d      	sub	sp, #52	; 0x34
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f91a 	bl	800434a <USB_GetMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 848a 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f87e 	bl	8004224 <USB_ReadInterrupts>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8480 	beq.w	8001a30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f003 f86b 	bl	8004224 <USB_ReadInterrupts>
 800114e:	4603      	mov	r3, r0
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b02      	cmp	r3, #2
 8001156:	d107      	bne.n	8001168 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f002 0202 	and.w	r2, r2, #2
 8001166:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f859 	bl	8004224 <USB_ReadInterrupts>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b10      	cmp	r3, #16
 800117a:	d161      	bne.n	8001240 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0210 	bic.w	r2, r2, #16
 800118a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f003 020f 	and.w	r2, r3, #15
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	3304      	adds	r3, #4
 80011aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	0c5b      	lsrs	r3, r3, #17
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d124      	bne.n	8001202 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d035      	beq.n	8001230 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f002 fe90 	bl	8003efc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e8:	441a      	add	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fa:	441a      	add	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	621a      	str	r2, [r3, #32]
 8001200:	e016      	b.n	8001230 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	0c5b      	lsrs	r3, r3, #17
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	2b06      	cmp	r3, #6
 800120c:	d110      	bne.n	8001230 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001214:	2208      	movs	r2, #8
 8001216:	4619      	mov	r1, r3
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f002 fe6f 	bl	8003efc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800122a:	441a      	add	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f002 ffed 	bl	8004224 <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001250:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001254:	f040 80a7 	bne.w	80013a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fff2 	bl	800424a <USB_ReadDevAllOutEpInterrupt>
 8001266:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001268:	e099      	b.n	800139e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 808e 	beq.w	8001392 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f816 	bl	80042b2 <USB_ReadDevOutEPInterrupt>
 8001286:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	015a      	lsls	r2, r3, #5
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800129e:	461a      	mov	r2, r3
 80012a0:	2301      	movs	r3, #1
 80012a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fec2 	bl	8002030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00c      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c2:	461a      	mov	r2, r3
 80012c4:	2308      	movs	r3, #8
 80012c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 ff98 	bl	8002200 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d008      	beq.n	80012ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	015a      	lsls	r2, r3, #5
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e6:	461a      	mov	r2, r3
 80012e8:	2310      	movs	r3, #16
 80012ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d030      	beq.n	8001358 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	2b80      	cmp	r3, #128	; 0x80
 8001300:	d109      	bne.n	8001316 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001314:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2200      	movs	r2, #0
 8001338:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f006 fc37 	bl	8007bb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	015a      	lsls	r2, r3, #5
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001352:	461a      	mov	r2, r3
 8001354:	2302      	movs	r3, #2
 8001356:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	2320      	movs	r3, #32
 8001372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f47f af62 	bne.w	800126a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 ff3a 	bl	8004224 <USB_ReadInterrupts>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013ba:	f040 80db 	bne.w	8001574 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 ff5b 	bl	800427e <USB_ReadDevAllInEpInterrupt>
 80013c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013ce:	e0cd      	b.n	800156c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80c2 	beq.w	8001560 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 ff81 	bl	80042ee <USB_ReadDevInEPInterrupt>
 80013ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d057      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	69f9      	ldr	r1, [r7, #28]
 8001414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001418:	4013      	ands	r3, r2
 800141a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d132      	bne.n	800149c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	334c      	adds	r3, #76	; 0x4c
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	3348      	adds	r3, #72	; 0x48
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4419      	add	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4403      	add	r3, r0
 800146a:	334c      	adds	r3, #76	; 0x4c
 800146c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	2b00      	cmp	r3, #0
 8001472:	d113      	bne.n	800149c <HAL_PCD_IRQHandler+0x3a2>
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3354      	adds	r3, #84	; 0x54
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d108      	bne.n	800149c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001494:	461a      	mov	r2, r3
 8001496:	2101      	movs	r1, #1
 8001498:	f002 ff88 	bl	80043ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f006 fb01 	bl	8007aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014be:	461a      	mov	r2, r3
 80014c0:	2308      	movs	r3, #8
 80014c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014da:	461a      	mov	r2, r3
 80014dc:	2310      	movs	r3, #16
 80014de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f6:	461a      	mov	r2, r3
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d023      	beq.n	800154e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001508:	6a38      	ldr	r0, [r7, #32]
 800150a:	f001 fe69 	bl	80031e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	3338      	adds	r3, #56	; 0x38
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	3304      	adds	r3, #4
 8001520:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f006 fb4e 	bl	8007bd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001548:	461a      	mov	r2, r3
 800154a:	2302      	movs	r3, #2
 800154c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fcdb 	bl	8001f16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3301      	adds	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f af2e 	bne.w	80013d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fe53 	bl	8004224 <USB_ReadInterrupts>
 800157e:	4603      	mov	r3, r0
 8001580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001588:	d122      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fec2 	bl	800233c <HAL_PCDEx_LPM_Callback>
 80015b8:	e002      	b.n	80015c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f006 faec 	bl	8007b98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fe25 	bl	8004224 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015e4:	d112      	bne.n	800160c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f006 faa8 	bl	8007b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800160a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fe07 	bl	8004224 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001620:	f040 80b7 	bne.w	8001792 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2110      	movs	r1, #16
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fdce 	bl	80031e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001648:	e046      	b.n	80016d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001656:	461a      	mov	r2, r3
 8001658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800165c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166e:	0151      	lsls	r1, r2, #5
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	440a      	add	r2, r1
 8001674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168a:	461a      	mov	r2, r3
 800168c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001690:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	4413      	add	r3, r2
 800169a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a2:	0151      	lsls	r1, r2, #5
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	440a      	add	r2, r1
 80016a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c2:	0151      	lsls	r1, r2, #5
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	440a      	add	r2, r1
 80016c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	3301      	adds	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3b3      	bcc.n	800164a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d016      	beq.n	800172c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170e:	f043 030b 	orr.w	r3, r3, #11
 8001712:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001724:	f043 030b 	orr.w	r3, r3, #11
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	e015      	b.n	8001758 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001742:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001752:	f043 030b 	orr.w	r3, r3, #11
 8001756:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001766:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800176a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800177c:	461a      	mov	r2, r3
 800177e:	f002 fe15 	bl	80043ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fd44 	bl	8004224 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a6:	d124      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fdda 	bl	8004366 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fd8f 	bl	80032da <USB_GetDevSpeed>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681c      	ldr	r4, [r3, #0]
 80017c8:	f001 fa28 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 80017cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4620      	mov	r0, r4
 80017d8:	f001 fa8e 	bl	8002cf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f006 f98c 	bl	8007afa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fd14 	bl	8004224 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b08      	cmp	r3, #8
 8001804:	d10a      	bne.n	800181c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f006 f969 	bl	8007ade <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f002 0208 	and.w	r2, r2, #8
 800181a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fcff 	bl	8004224 <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182c:	2b80      	cmp	r3, #128	; 0x80
 800182e:	d122      	bne.n	8001876 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e014      	b.n	800186c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fb27 	bl	8001eb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	429a      	cmp	r2, r3
 8001874:	d3e5      	bcc.n	8001842 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fcd2 	bl	8004224 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188a:	d13b      	bne.n	8001904 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e02b      	b.n	80018ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3340      	adds	r3, #64	; 0x40
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d115      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da12      	bge.n	80018e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	333f      	adds	r3, #63	; 0x3f
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fae8 	bl	8001eb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3301      	adds	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3ce      	bcc.n	8001892 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fc8b 	bl	8004224 <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001918:	d155      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e045      	b.n	80019ac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d12e      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001948:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	da2b      	bge.n	80019a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800195a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800195e:	429a      	cmp	r2, r3
 8001960:	d121      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10a      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6053      	str	r3, [r2, #4]
            break;
 80019a4:	e007      	b.n	80019b6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3301      	adds	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3b4      	bcc.n	8001920 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fc2a 	bl	8004224 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d10a      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f006 f90d 	bl	8007bfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fc14 	bl	8004224 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d115      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f006 f8fd 	bl	8007c18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e000      	b.n	8001a32 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a30:	bf00      	nop
    }
  }
}
 8001a32:	3734      	adds	r7, #52	; 0x34
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_SetAddress+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e013      	b.n	8001a7a <HAL_PCD_SetAddress+0x42>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fb72 	bl	8004154 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	460b      	mov	r3, r1
 8001a96:	803b      	strh	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da0f      	bge.n	8001ac8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 020f 	and.w	r2, r3, #15
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	3338      	adds	r3, #56	; 0x38
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	705a      	strb	r2, [r3, #1]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001af4:	883a      	ldrh	r2, [r7, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d102      	bne.n	8001b1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_PCD_EP_Open+0xaa>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e00e      	b.n	8001b4a <HAL_PCD_EP_Open+0xc8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fbf2 	bl	8003324 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da0f      	bge.n	8001b86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3338      	adds	r3, #56	; 0x38
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	705a      	strb	r2, [r3, #1]
 8001b84:	e00f      	b.n	8001ba6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_PCD_EP_Close+0x6e>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e00e      	b.n	8001bde <HAL_PCD_EP_Close+0x8c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fc30 	bl	8003434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	6979      	ldr	r1, [r7, #20]
 8001c5a:	f001 ff0f 	bl	8003a7c <USB_EP0StartXfer>
 8001c5e:	e008      	b.n	8001c72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6979      	ldr	r1, [r7, #20]
 8001c6e:	f001 fcbd 	bl	80035ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	f001 fead 	bl	8003a7c <USB_EP0StartXfer>
 8001d22:	e008      	b.n	8001d36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	f001 fc5b 	bl	80035ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d901      	bls.n	8001d5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e050      	b.n	8001e00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da0f      	bge.n	8001d86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
 8001d84:	e00d      	b.n	8001da2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_EP_SetStall+0x82>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e01e      	b.n	8001e00 <HAL_PCD_EP_SetStall+0xc0>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 f8eb 	bl	8003fac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001df0:	461a      	mov	r2, r3
 8001df2:	f002 fadb 	bl	80043ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d901      	bls.n	8001e26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e042      	b.n	8001eac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0f      	bge.n	8001e4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00f      	b.n	8001e6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_ClrStall+0x86>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_ClrStall+0xa4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 f8f3 	bl	8004088 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0c      	bge.n	8001ee2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3338      	adds	r3, #56	; 0x38
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e00c      	b.n	8001efc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 ff12 	bl	8003d2c <USB_EPStopXfer>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b08a      	sub	sp, #40	; 0x28
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3338      	adds	r3, #56	; 0x38
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d901      	bls.n	8001f4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06c      	b.n	8002028 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d902      	bls.n	8001f6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f72:	e02b      	b.n	8001fcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d902      	bls.n	8001f90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3303      	adds	r3, #3
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6919      	ldr	r1, [r3, #16]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f001 ff66 	bl	8003e80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	441a      	add	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d809      	bhi.n	8001ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d203      	bcs.n	8001ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1be      	bne.n	8001f74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d811      	bhi.n	8002026 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	43db      	mvns	r3, r3
 800201c:	6939      	ldr	r1, [r7, #16]
 800201e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002022:	4013      	ands	r3, r2
 8002024:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	3304      	adds	r3, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d17b      	bne.n	800215e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f240 80b9 	bls.w	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80b3 	beq.w	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	461a      	mov	r2, r3
 8002094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002098:	6093      	str	r3, [r2, #8]
 800209a:	e0a7      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2320      	movs	r3, #32
 80020b6:	6093      	str	r3, [r2, #8]
 80020b8:	e098      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 8093 	bne.w	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d90f      	bls.n	80020ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e4:	461a      	mov	r2, r3
 80020e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ea:	6093      	str	r3, [r2, #8]
 80020ec:	e07e      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	0159      	lsls	r1, r3, #5
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	440b      	add	r3, r1
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002138:	461a      	mov	r2, r3
 800213a:	2101      	movs	r1, #1
 800213c:	f002 f936 	bl	80043ac <USB_EP0_OutStart>
 8002140:	e006      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f005 fc8c 	bl	8007a74 <HAL_PCD_DataOutStageCallback>
 800215c:	e046      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d124      	bne.n	80021b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217c:	461a      	mov	r2, r3
 800217e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002182:	6093      	str	r3, [r2, #8]
 8002184:	e032      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	2320      	movs	r3, #32
 80021a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f005 fc63 	bl	8007a74 <HAL_PCD_DataOutStageCallback>
 80021ae:	e01d      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d8:	461a      	mov	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	f002 f8e6 	bl	80043ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f005 fc44 	bl	8007a74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	4f54300a 	.word	0x4f54300a
 80021fc:	4f54310a 	.word	0x4f54310a

08002200 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	333c      	adds	r3, #60	; 0x3c
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <PCD_EP_OutSetupPacket_int+0x88>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d90e      	bls.n	8002254 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f005 fbfb 	bl	8007a50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <PCD_EP_OutSetupPacket_int+0x88>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d90c      	bls.n	800227c <PCD_EP_OutSetupPacket_int+0x7c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002274:	461a      	mov	r2, r3
 8002276:	2101      	movs	r1, #1
 8002278:	f002 f898 	bl	80043ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	4f54300a 	.word	0x4f54300a

0800228c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
 8002298:	4613      	mov	r3, r2
 800229a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022aa:	883b      	ldrh	r3, [r7, #0]
 80022ac:	0419      	lsls	r1, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
 80022b8:	e028      	b.n	800230c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e00d      	b.n	80022ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3340      	adds	r3, #64	; 0x40
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3ec      	bcc.n	80022ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022f4:	883b      	ldrh	r3, [r7, #0]
 80022f6:	0418      	lsls	r0, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	3b01      	subs	r3, #1
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4302      	orrs	r2, r0
 8002304:	3340      	adds	r3, #64	; 0x40
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e267      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d075      	beq.n	800245e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d00c      	beq.n	8002398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b85      	ldr	r3, [pc, #532]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	2b08      	cmp	r3, #8
 8002388:	d112      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002396:	d10b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05b      	beq.n	800245c <HAL_RCC_OscConfig+0x108>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d157      	bne.n	800245c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e242      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x74>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6f      	ldr	r2, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023ec:	4b69      	ldr	r3, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a68      	ldr	r2, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a65      	ldr	r2, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fa2e 	bl	800086c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fa2a 	bl	800086c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e207      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xc0>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fa1a 	bl	800086c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fa16 	bl	800086c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1f3      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0xe8>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c7      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe f9cf 	bl	800086c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe f9cb 	bl	800086c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1a8      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4925      	ldr	r1, [pc, #148]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f9ae 	bl	800086c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe f9aa 	bl	800086c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e187      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d036      	beq.n	80025ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe f98e 	bl	800086c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe f98a 	bl	800086c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e167      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x200>
 8002572:	e01b      	b.n	80025ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe f977 	bl	800086c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	e00e      	b.n	80025a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe f973 	bl	800086c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d907      	bls.n	80025a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e150      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ea      	bne.n	8002582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8097 	beq.w	80026e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b7d      	ldr	r3, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b77      	ldr	r3, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b74      	ldr	r3, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe f933 	bl	800086c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe f92f 	bl	800086c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e10c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x2ea>
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b05      	cmp	r3, #5
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x30c>
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5b      	ldr	r2, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe f8f4 	bl	800086c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe f8f0 	bl	800086c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0cb      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ee      	beq.n	8002688 <HAL_RCC_OscConfig+0x334>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7fe f8de 	bl	800086c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe f8da 	bl	800086c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0b5      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ee      	bne.n	80026b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a1 	beq.w	8002834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d05c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d141      	bne.n	800278a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe f8ae 	bl	800086c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe f8aa 	bl	800086c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e087      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	491b      	ldr	r1, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f883 	bl	800086c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe f87f 	bl	800086c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e05c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x416>
 8002788:	e054      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe f86c 	bl	800086c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe f868 	bl	800086c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e045      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e038      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
 80027cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4ec>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d028      	beq.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d121      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d11a      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	3b01      	subs	r3, #1
 800281a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0cc      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d90c      	bls.n	8002880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d044      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e067      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4934      	ldr	r1, [pc, #208]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fd ff9a 	bl	800086c <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fd ff96 	bl	800086c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d20c      	bcs.n	800298c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fefa 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08008098 	.word	0x08008098
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a14:	b094      	sub	sp, #80	; 0x50
 8002a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	2300      	movs	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a28:	4b79      	ldr	r3, [pc, #484]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d00d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x40>
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	f200 80e1 	bhi.w	8002bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a42:	e0db      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a48:	e0db      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4e:	e0d8      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a50:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a82:	4622      	mov	r2, r4
 8002a84:	462b      	mov	r3, r5
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a94:	0150      	lsls	r0, r2, #5
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	1a51      	subs	r1, r2, r1
 8002a9e:	6139      	str	r1, [r7, #16]
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abe:	4651      	mov	r1, sl
 8002ac0:	018a      	lsls	r2, r1, #6
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac8:	4659      	mov	r1, fp
 8002aca:	eb63 0901 	sbc.w	r9, r3, r1
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	eb18 0303 	adds.w	r3, r8, r3
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	462b      	mov	r3, r5
 8002af0:	eb49 0303 	adc.w	r3, r9, r3
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b02:	4629      	mov	r1, r5
 8002b04:	024b      	lsls	r3, r1, #9
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	024a      	lsls	r2, r1, #9
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b20:	f7fd fb52 	bl	80001c8 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e058      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	2200      	movs	r2, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	4611      	mov	r1, r2
 8002b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b48:	4642      	mov	r2, r8
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	f04f 0000 	mov.w	r0, #0
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	0159      	lsls	r1, r3, #5
 8002b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5a:	0150      	lsls	r0, r2, #5
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4641      	mov	r1, r8
 8002b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b80:	ebb2 040a 	subs.w	r4, r2, sl
 8002b84:	eb63 050b 	sbc.w	r5, r3, fp
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	00eb      	lsls	r3, r5, #3
 8002b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b96:	00e2      	lsls	r2, r4, #3
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4643      	mov	r3, r8
 8002b9e:	18e3      	adds	r3, r4, r3
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	eb45 0303 	adc.w	r3, r5, r3
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	028b      	lsls	r3, r1, #10
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	028a      	lsls	r2, r1, #10
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	61fa      	str	r2, [r7, #28]
 8002bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd4:	f7fd faf8 	bl	80001c8 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3750      	adds	r7, #80	; 0x50
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000

08002c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c34:	b084      	sub	sp, #16
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	f107 001c 	add.w	r0, r7, #28
 8002c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d122      	bne.n	8002c92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f001 fbee 	bl	8004468 <USB_CoreReset>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e01a      	b.n	8002cc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f001 fbe2 	bl	8004468 <USB_CoreReset>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cba:	e005      	b.n	8002cc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10b      	bne.n	8002ce6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f043 0206 	orr.w	r2, r3, #6
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cf2:	b004      	add	sp, #16
 8002cf4:	4770      	bx	lr
	...

08002cf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d165      	bne.n	8002dd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a41      	ldr	r2, [pc, #260]	; (8002e14 <USB_SetTurnaroundTime+0x11c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d906      	bls.n	8002d22 <USB_SetTurnaroundTime+0x2a>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <USB_SetTurnaroundTime+0x120>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d202      	bcs.n	8002d22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e062      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <USB_SetTurnaroundTime+0x120>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d306      	bcc.n	8002d38 <USB_SetTurnaroundTime+0x40>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <USB_SetTurnaroundTime+0x124>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d202      	bcs.n	8002d38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d32:	230e      	movs	r3, #14
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e057      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <USB_SetTurnaroundTime+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d306      	bcc.n	8002d4e <USB_SetTurnaroundTime+0x56>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <USB_SetTurnaroundTime+0x128>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d202      	bcs.n	8002d4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d48:	230d      	movs	r3, #13
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e04c      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <USB_SetTurnaroundTime+0x128>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d306      	bcc.n	8002d64 <USB_SetTurnaroundTime+0x6c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <USB_SetTurnaroundTime+0x12c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d802      	bhi.n	8002d64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e041      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <USB_SetTurnaroundTime+0x12c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d906      	bls.n	8002d7a <USB_SetTurnaroundTime+0x82>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <USB_SetTurnaroundTime+0x130>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d802      	bhi.n	8002d7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d74:	230b      	movs	r3, #11
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e036      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <USB_SetTurnaroundTime+0x130>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d906      	bls.n	8002d90 <USB_SetTurnaroundTime+0x98>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <USB_SetTurnaroundTime+0x134>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d802      	bhi.n	8002d90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e02b      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <USB_SetTurnaroundTime+0x134>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d906      	bls.n	8002da6 <USB_SetTurnaroundTime+0xae>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <USB_SetTurnaroundTime+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d202      	bcs.n	8002da6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002da0:	2309      	movs	r3, #9
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	e020      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <USB_SetTurnaroundTime+0x138>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d306      	bcc.n	8002dbc <USB_SetTurnaroundTime+0xc4>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <USB_SetTurnaroundTime+0x13c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d802      	bhi.n	8002dbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002db6:	2308      	movs	r3, #8
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e015      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <USB_SetTurnaroundTime+0x13c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d906      	bls.n	8002dd2 <USB_SetTurnaroundTime+0xda>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <USB_SetTurnaroundTime+0x140>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d202      	bcs.n	8002dd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dcc:	2307      	movs	r3, #7
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e00a      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e007      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dde:	2309      	movs	r3, #9
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e001      	b.n	8002de8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002de4:	2309      	movs	r3, #9
 8002de6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	00d8acbf 	.word	0x00d8acbf
 8002e18:	00e4e1c0 	.word	0x00e4e1c0
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	01067380 	.word	0x01067380
 8002e24:	011a499f 	.word	0x011a499f
 8002e28:	01312cff 	.word	0x01312cff
 8002e2c:	014ca43f 	.word	0x014ca43f
 8002e30:	016e3600 	.word	0x016e3600
 8002e34:	01a6ab1f 	.word	0x01a6ab1f
 8002e38:	01e84800 	.word	0x01e84800

08002e3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0201 	bic.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d115      	bne.n	8002ece <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fd fce8 	bl	8000884 <HAL_Delay>
      ms++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f001 fa45 	bl	800434a <USB_GetMode>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d01e      	beq.n	8002f04 <USB_SetCurrentMode+0x84>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b31      	cmp	r3, #49	; 0x31
 8002eca:	d9f0      	bls.n	8002eae <USB_SetCurrentMode+0x2e>
 8002ecc:	e01a      	b.n	8002f04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d115      	bne.n	8002f00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7fd fccf 	bl	8000884 <HAL_Delay>
      ms++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f001 fa2c 	bl	800434a <USB_GetMode>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <USB_SetCurrentMode+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b31      	cmp	r3, #49	; 0x31
 8002efc:	d9f0      	bls.n	8002ee0 <USB_SetCurrentMode+0x60>
 8002efe:	e001      	b.n	8002f04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e005      	b.n	8002f10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b32      	cmp	r3, #50	; 0x32
 8002f08:	d101      	bne.n	8002f0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f18:	b084      	sub	sp, #16
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	e009      	b.n	8002f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	3340      	adds	r3, #64	; 0x40
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0e      	cmp	r3, #14
 8002f50:	d9f2      	bls.n	8002f38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11c      	bne.n	8002f92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f90:	e00b      	b.n	8002faa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	680b      	ldr	r3, [r1, #0]
 8002fc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10c      	bne.n	8002fea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f965 	bl	80032a8 <USB_SetDevSpeed>
 8002fde:	e008      	b.n	8002ff2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f960 	bl	80032a8 <USB_SetDevSpeed>
 8002fe8:	e003      	b.n	8002ff2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fea:	2103      	movs	r1, #3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f95b 	bl	80032a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8f3 	bl	80031e0 <USB_FlushTxFifo>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f91f 	bl	8003248 <USB_FlushRxFifo>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e043      	b.n	80030c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003054:	d118      	bne.n	8003088 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003068:	461a      	mov	r2, r3
 800306a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e013      	b.n	800309a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307e:	461a      	mov	r2, r3
 8003080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e008      	b.n	800309a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	461a      	mov	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b8:	461a      	mov	r2, r3
 80030ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3301      	adds	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3b7      	bcc.n	800303e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e043      	b.n	800315c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ea:	d118      	bne.n	800311e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e013      	b.n	8003130 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e008      	b.n	8003130 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	2300      	movs	r3, #0
 8003140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	d3b7      	bcc.n	80030d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003176:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <USB_DevInit+0x2c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f043 0208 	orr.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031d8:	b004      	add	sp, #16
 80031da:	4770      	bx	lr
 80031dc:	803c3800 	.word	0x803c3800

080031e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a13      	ldr	r2, [pc, #76]	; (8003244 <USB_FlushTxFifo+0x64>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e01b      	b.n	8003238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	daf2      	bge.n	80031ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	019b      	lsls	r3, r3, #6
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <USB_FlushTxFifo+0x64>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e006      	b.n	8003238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d0f0      	beq.n	8003218 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	00030d40 	.word	0x00030d40

08003248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <USB_FlushRxFifo+0x5c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e018      	b.n	8003298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	daf2      	bge.n	8003254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2210      	movs	r2, #16
 8003276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <USB_FlushRxFifo+0x5c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e006      	b.n	8003298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b10      	cmp	r3, #16
 8003294:	d0f0      	beq.n	8003278 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	00030d40 	.word	0x00030d40

080032a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
 80032fe:	e00a      	b.n	8003316 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d002      	beq.n	800330c <USB_GetDevSpeed+0x32>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b06      	cmp	r3, #6
 800330a:	d102      	bne.n	8003312 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
 8003310:	e001      	b.n	8003316 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003312:	230f      	movs	r3, #15
 8003314:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
}
 8003318:	4618      	mov	r0, r3
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d13a      	bne.n	80033b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	b29b      	uxth	r3, r3
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335e:	4313      	orrs	r3, r2
 8003360:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d155      	bne.n	8003424 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003394:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	059b      	lsls	r3, r3, #22
 800339a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800339c:	4313      	orrs	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e036      	b.n	8003424 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	2101      	movs	r1, #1
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11a      	bne.n	8003424 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	791b      	ldrb	r3, [r3, #4]
 8003408:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800340a:	430b      	orrs	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d161      	bne.n	8003514 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003466:	d11f      	bne.n	80034a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003482:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003486:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c8:	4013      	ands	r3, r2
 80034ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ec:	4013      	ands	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0159      	lsls	r1, r3, #5
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	440b      	add	r3, r1
 8003506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350a:	4619      	mov	r1, r3
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <USB_DeactivateEndpoint+0x1b0>)
 800350e:	4013      	ands	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
 8003512:	e060      	b.n	80035d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800352a:	d11f      	bne.n	800356c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800354a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800356a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	43db      	mvns	r3, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4013      	ands	r3, r2
 800358e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b0:	4013      	ands	r3, r2
 80035b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	4619      	mov	r1, r3
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <USB_DeactivateEndpoint+0x1b4>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	ec337800 	.word	0xec337800
 80035e8:	eff37800 	.word	0xeff37800

080035ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	f040 815c 	bne.w	80038c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d132      	bne.n	800367c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	440a      	add	r2, r1
 800362c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003638:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	440a      	add	r2, r1
 8003650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003674:	0cdb      	lsrs	r3, r3, #19
 8003676:	04db      	lsls	r3, r3, #19
 8003678:	6113      	str	r3, [r2, #16]
 800367a:	e074      	b.n	8003766 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003696:	0cdb      	lsrs	r3, r3, #19
 8003698:	04db      	lsls	r3, r3, #19
 800369a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6999      	ldr	r1, [r3, #24]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	440b      	add	r3, r1
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036e4:	4b9d      	ldr	r3, [pc, #628]	; (800395c <USB_EPStartXfer+0x370>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	0148      	lsls	r0, r1, #5
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	4401      	add	r1, r0
 80036f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	69b9      	ldr	r1, [r7, #24]
 8003710:	0148      	lsls	r0, r1, #5
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	4401      	add	r1, r0
 8003716:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d11f      	bne.n	8003766 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003744:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003764:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d14b      	bne.n	8003804 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	791b      	ldrb	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d128      	bne.n	80037e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e00f      	b.n	80037e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e133      	b.n	8003a6c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	440a      	add	r2, r1
 800381a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800381e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003822:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	791b      	ldrb	r3, [r3, #4]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d015      	beq.n	8003858 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 811b 	beq.w	8003a6c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003852:	4313      	orrs	r3, r2
 8003854:	634b      	str	r3, [r1, #52]	; 0x34
 8003856:	e109      	b.n	8003a6c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d110      	bne.n	800388a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e00f      	b.n	80038aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	b298      	uxth	r0, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4603      	mov	r3, r0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fade 	bl	8003e80 <USB_WritePacket>
 80038c4:	e0d2      	b.n	8003a6c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	0151      	lsls	r1, r2, #5
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	440a      	add	r2, r1
 80038dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e0:	0cdb      	lsrs	r3, r3, #19
 80038e2:	04db      	lsls	r3, r3, #19
 80038e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003900:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003904:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003908:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d126      	bne.n	8003960 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	0148      	lsls	r0, r1, #5
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	4401      	add	r1, r0
 8003930:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003956:	6113      	str	r3, [r2, #16]
 8003958:	e03a      	b.n	80039d0 <USB_EPStartXfer+0x3e4>
 800395a:	bf00      	nop
 800395c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4413      	add	r3, r2
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	8afa      	ldrh	r2, [r7, #22]
 800397c:	fb03 f202 	mul.w	r2, r3, r2
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	8afb      	ldrh	r3, [r7, #22]
 8003994:	04d9      	lsls	r1, r3, #19
 8003996:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <USB_EPStartXfer+0x48c>)
 8003998:	400b      	ands	r3, r1
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	0148      	lsls	r0, r1, #5
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	4401      	add	r1, r0
 80039a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	0148      	lsls	r0, r1, #5
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	4401      	add	r1, r0
 80039c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d10d      	bne.n	80039f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	460a      	mov	r2, r1
 80039f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d128      	bne.n	8003a4c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d110      	bne.n	8003a2c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00f      	b.n	8003a4c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	1ff80000 	.word	0x1ff80000

08003a7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 80ce 	bne.w	8003c3a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d132      	bne.n	8003b0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ac4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b04:	0cdb      	lsrs	r3, r3, #19
 8003b06:	04db      	lsls	r3, r3, #19
 8003b08:	6113      	str	r3, [r2, #16]
 8003b0a:	e04e      	b.n	8003baa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b26:	0cdb      	lsrs	r3, r3, #19
 8003b28:	04db      	lsls	r3, r3, #19
 8003b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d903      	bls.n	8003b64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	6939      	ldr	r1, [r7, #16]
 8003b9c:	0148      	lsls	r0, r1, #5
 8003b9e:	6979      	ldr	r1, [r7, #20]
 8003ba0:	4401      	add	r1, r0
 8003ba2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d11e      	bne.n	8003bee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e097      	b.n	8003d1e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8083 	beq.w	8003d1e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c34:	4313      	orrs	r3, r2
 8003c36:	634b      	str	r3, [r1, #52]	; 0x34
 8003c38:	e071      	b.n	8003d1e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c54:	0cdb      	lsrs	r3, r3, #19
 8003c56:	04db      	lsls	r3, r3, #19
 8003c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	0151      	lsls	r1, r2, #5
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	440a      	add	r2, r1
 8003cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ccc:	6939      	ldr	r1, [r7, #16]
 8003cce:	0148      	lsls	r0, r1, #5
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	4401      	add	r1, r0
 8003cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10d      	bne.n	8003cfe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6919      	ldr	r1, [r3, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	785b      	ldrb	r3, [r3, #1]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d14a      	bne.n	8003de0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d62:	f040 8086 	bne.w	8003e72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d902      	bls.n	8003dc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8003dc2:	e056      	b.n	8003e72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ddc:	d0e7      	beq.n	8003dae <USB_EPStopXfer+0x82>
 8003dde:	e048      	b.n	8003e72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df8:	d13b      	bne.n	8003e72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	7812      	ldrb	r2, [r2, #0]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3301      	adds	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d902      	bls.n	8003e58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
          break;
 8003e56:	e00c      	b.n	8003e72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e70:	d0e7      	beq.n	8003e42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	460b      	mov	r3, r1
 8003e90:	71fb      	strb	r3, [r7, #7]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d123      	bne.n	8003eee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ea6:	88bb      	ldrh	r3, [r7, #4]
 8003ea8:	3303      	adds	r3, #3
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e018      	b.n	8003ee6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	031a      	lsls	r2, r3, #12
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3e2      	bcc.n	8003eb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3724      	adds	r7, #36	; 0x24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b08b      	sub	sp, #44	; 0x2c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	e014      	b.n	8003f52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	3301      	adds	r3, #1
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	3301      	adds	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	3301      	adds	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3e6      	bcc.n	8003f28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f5a:	8bfb      	ldrh	r3, [r7, #30]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01e      	beq.n	8003f9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	701a      	strb	r2, [r3, #0]
      i++;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	3301      	adds	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f92:	8bfb      	ldrh	r3, [r7, #30]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f98:	8bfb      	ldrh	r3, [r7, #30]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ea      	bne.n	8003f74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	372c      	adds	r7, #44	; 0x2c
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d12c      	bne.n	8004022 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db12      	blt.n	8004000 <USB_EPSetStall+0x54>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00f      	beq.n	8004000 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ffe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e02b      	b.n	800407a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	db12      	blt.n	800405a <USB_EPSetStall+0xae>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00f      	beq.n	800405a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	0151      	lsls	r1, r2, #5
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	440a      	add	r2, r1
 8004050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004054:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004058:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004078:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d128      	bne.n	80040f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	791b      	ldrb	r3, [r3, #4]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <USB_EPClearStall+0x4c>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	791b      	ldrb	r3, [r3, #4]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d138      	bne.n	8004146 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e027      	b.n	8004146 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004114:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d003      	beq.n	8004126 <USB_EPClearStall+0x9e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	791b      	ldrb	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d10f      	bne.n	8004146 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004144:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004176:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ce:	f023 0302 	bic.w	r3, r3, #2
 80041d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041fc:	f023 0303 	bic.w	r3, r3, #3
 8004200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	b29b      	uxth	r3, r3
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042e0:	68bb      	ldr	r3, [r7, #8]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	b2db      	uxtb	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800433c:	68bb      	ldr	r3, [r7, #8]
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0301 	and.w	r3, r3, #1
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004384:	f023 0307 	bic.w	r3, r3, #7
 8004388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	460b      	mov	r3, r1
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	333c      	adds	r3, #60	; 0x3c
 80043c2:	3304      	adds	r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <USB_EP0_OutStart+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d90a      	bls.n	80043e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e0:	d101      	bne.n	80043e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e037      	b.n	8004456 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	461a      	mov	r2, r3
 80043ee:	2300      	movs	r3, #0
 80043f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f043 0318 	orr.w	r3, r3, #24
 8004418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004428:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800442c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10f      	bne.n	8004454 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	4f54300a 	.word	0x4f54300a

08004468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <USB_CoreReset+0x64>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e01b      	b.n	80044be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	daf2      	bge.n	8004474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <USB_CoreReset+0x64>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e006      	b.n	80044be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d0f0      	beq.n	800449e <USB_CoreReset+0x36>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	00030d40 	.word	0x00030d40

080044d0 <FMSTR_CopyToBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyToBuffer(FMSTR_BPTR pDestBuff, FMSTR_ADDR nSrcAddr, FMSTR_SIZE8 nSize)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) nSrcAddr;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) pDestBuff;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	613b      	str	r3, [r7, #16]

    while(nSize--)
 80044e6:	e007      	b.n	80044f8 <FMSTR_CopyToBuffer+0x28>
    {
        *pd++ = *ps++;
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	1c53      	adds	r3, r2, #1
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	6139      	str	r1, [r7, #16]
 80044f4:	7812      	ldrb	r2, [r2, #0]
 80044f6:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	71fa      	strb	r2, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f2      	bne.n	80044e8 <FMSTR_CopyToBuffer+0x18>
    }

    return (FMSTR_BPTR) pd;
 8004502:	693b      	ldr	r3, [r7, #16]
}
 8004504:	4618      	mov	r0, r3
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <FMSTR_CopyFromBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyFromBuffer(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	613b      	str	r3, [r7, #16]

    while(nSize--)
 8004526:	e007      	b.n	8004538 <FMSTR_CopyFromBuffer+0x28>
    {
        *pd++ = *ps++;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	1c53      	adds	r3, r2, #1
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	6139      	str	r1, [r7, #16]
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	71fa      	strb	r2, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f2      	bne.n	8004528 <FMSTR_CopyFromBuffer+0x18>
    }

    return (FMSTR_BPTR) ps;
 8004542:	697b      	ldr	r3, [r7, #20]
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <FMSTR_ValueFromBuffer16>:

#if (FMSTR_BYTE_BUFFER_ACCESS)
FMSTR_BPTR FMSTR_ValueFromBuffer16(FMSTR_U16* pDest, FMSTR_BPTR pSrc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    return FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pDest, pSrc, 2U);
 800455a:	2202      	movs	r2, #2
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffd6 	bl	8004510 <FMSTR_CopyFromBuffer>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <FMSTR_ValueFromBuffer32>:

FMSTR_BPTR FMSTR_ValueFromBuffer32(FMSTR_U32* pDest, FMSTR_BPTR pSrc)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
    return FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pDest, pSrc, 4U);
 8004578:	2204      	movs	r2, #4
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ffc7 	bl	8004510 <FMSTR_CopyFromBuffer>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <FMSTR_ValueToBuffer16>:

FMSTR_BPTR FMSTR_ValueToBuffer16(FMSTR_BPTR pDest, FMSTR_U16 src)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
    return FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)(FMSTR_U8*)&src, 2U);
 8004598:	1cbb      	adds	r3, r7, #2
 800459a:	2202      	movs	r2, #2
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ff96 	bl	80044d0 <FMSTR_CopyToBuffer>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <FMSTR_CopyFromBufferWithMask>:
* @param  nSize     - buffer size (always in bytes)
*
******************************************************************************/

void FMSTR_CopyFromBufferWithMask(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b089      	sub	sp, #36	; 0x24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	61bb      	str	r3, [r7, #24]
    FMSTR_U8* pm = ps + nSize;
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
    FMSTR_U8 mask, stmp, dtmp;

    while(nSize--)
 80045cc:	e021      	b.n	8004612 <FMSTR_CopyFromBufferWithMask+0x64>
    {
        mask = *pm++;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	617a      	str	r2, [r7, #20]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	74fb      	strb	r3, [r7, #19]
        stmp = *ps++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	61fa      	str	r2, [r7, #28]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	74bb      	strb	r3, [r7, #18]
        dtmp = *pd;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	747b      	strb	r3, [r7, #17]

        /* perform AND-masking */
        stmp = (FMSTR_U8) ((stmp & mask) | (dtmp & ~mask));
 80045e8:	7cba      	ldrb	r2, [r7, #18]
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	4013      	ands	r3, r2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	b25a      	sxtb	r2, r3
 80045f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	b259      	sxtb	r1, r3
 80045fa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80045fe:	400b      	ands	r3, r1
 8004600:	b25b      	sxtb	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b25b      	sxtb	r3, r3
 8004606:	74bb      	strb	r3, [r7, #18]

        /* put the result back */
        *pd++ = stmp;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	61ba      	str	r2, [r7, #24]
 800460e:	7cba      	ldrb	r2, [r7, #18]
 8004610:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	71fa      	strb	r2, [r7, #7]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1d8      	bne.n	80045ce <FMSTR_CopyFromBufferWithMask+0x20>
    }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3724      	adds	r7, #36	; 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <FMSTR_SetExAddr>:
******************************************************************************/

static FMSTR_BOOL pcm_bNextAddrIsEx;

void FMSTR_SetExAddr(FMSTR_BOOL bNextAddrIsEx)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
    pcm_bNextAddrIsEx = bNextAddrIsEx;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <FMSTR_SetExAddr+0x1c>)
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	7013      	strb	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	2000011c 	.word	0x2000011c

0800464c <FMSTR_AddressToBuffer>:
*         32 or 16 bit wide (based on previous call to FMSTR_SetExAddr)
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressToBuffer(FMSTR_BPTR pDest, FMSTR_ADDR nAddr)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <FMSTR_AddressToBuffer+0x3c>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <FMSTR_AddressToBuffer+0x22>
    {
        /* fill in the 32bit address */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 4U);
 800465e:	463b      	mov	r3, r7
 8004660:	2204      	movs	r2, #4
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff33 	bl	80044d0 <FMSTR_CopyToBuffer>
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	e006      	b.n	800467c <FMSTR_AddressToBuffer+0x30>
    }
    else
    {
        /* fill in the 16bit address (never used) */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 2U);
 800466e:	463b      	mov	r3, r7
 8004670:	2202      	movs	r2, #2
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff2b 	bl	80044d0 <FMSTR_CopyToBuffer>
 800467a:	6078      	str	r0, [r7, #4]
        *(FMSTR_U16*) pDest = ((FMSTR_U16)nAddr);
        pDest += 2;
#endif
    }

    return pDest;
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000011c 	.word	0x2000011c

0800468c <FMSTR_AddressFromBuffer>:
* @brief  Fetch address from communication buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressFromBuffer(FMSTR_ADDR* pAddr, FMSTR_BPTR pSrc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <FMSTR_AddressFromBuffer+0x38>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <FMSTR_AddressFromBuffer+0x20>
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 4U);
 800469e:	2204      	movs	r2, #4
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ff34 	bl	8004510 <FMSTR_CopyFromBuffer>
 80046a8:	6038      	str	r0, [r7, #0]
 80046aa:	e005      	b.n	80046b8 <FMSTR_AddressFromBuffer+0x2c>
#endif
    }
    else
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 2U);
 80046ac:	2202      	movs	r2, #2
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff2d 	bl	8004510 <FMSTR_CopyFromBuffer>
 80046b6:	6038      	str	r0, [r7, #0]
        *pAddr = (FMSTR_ADDR) *((FMSTR_U16*) pSrc);
        pSrc += 2;
#endif
    }

    return pSrc;
 80046b8:	683b      	ldr	r3, [r7, #0]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000011c 	.word	0x2000011c

080046c8 <FMSTR_InitAppCmds>:
* @brief    Initialize app.cmds interface
*
******************************************************************************/

void FMSTR_InitAppCmds(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	80fb      	strh	r3, [r7, #6]
 80046d2:	e010      	b.n	80046f6 <FMSTR_InitAppCmds+0x2e>
    {
        pcm_pAppCmdCallId[i] = FMSTR_APPCMDRESULT_NOCMD;
 80046d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d8:	4a0f      	ldr	r2, [pc, #60]	; (8004718 <FMSTR_InitAppCmds+0x50>)
 80046da:	21ff      	movs	r1, #255	; 0xff
 80046dc:	54d1      	strb	r1, [r2, r3]
        pcm_pAppCmdCallFunc[i] = NULL;
 80046de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <FMSTR_InitAppCmds+0x54>)
 80046e4:	2100      	movs	r1, #0
 80046e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 80046ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	80fb      	strh	r3, [r7, #6]
 80046f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	ddea      	ble.n	80046d4 <FMSTR_InitAppCmds+0xc>
    }
#endif      

    pcm_nAppCmd = (FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD;
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <FMSTR_InitAppCmds+0x58>)
 8004700:	22ff      	movs	r2, #255	; 0xff
 8004702:	701a      	strb	r2, [r3, #0]
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_NOCMD;
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <FMSTR_InitAppCmds+0x5c>)
 8004706:	22ff      	movs	r2, #255	; 0xff
 8004708:	701a      	strb	r2, [r3, #0]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000144 	.word	0x20000144
 800471c:	20000148 	.word	0x20000148
 8004720:	2000011d 	.word	0x2000011d
 8004724:	20000142 	.word	0x20000142

08004728 <FMSTR_StoreAppCmd>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StoreAppCmd(FMSTR_BPTR pMessageIO)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nArgsLen;
    FMSTR_U8 nCode;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD))
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <FMSTR_StoreAppCmd+0x9c>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2bff      	cmp	r3, #255	; 0xff
 800473a:	d005      	beq.n	8004748 <FMSTR_StoreAppCmd+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2287      	movs	r2, #135	; 0x87
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3301      	adds	r3, #1
 8004746:	e038      	b.n	80047ba <FMSTR_StoreAppCmd+0x92>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3301      	adds	r3, #1
 800474c:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nArgsLen, pMessageIO);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nCode, pMessageIO);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	73bb      	strb	r3, [r7, #14]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3301      	adds	r3, #1
 8004764:	607b      	str	r3, [r7, #4]

    /* args len is datalen minus one */
    nArgsLen--;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	3b01      	subs	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	73fb      	strb	r3, [r7, #15]
        
    /* does the application command fit to buffer ? */
    if (nArgsLen > (FMSTR_SIZE8) FMSTR_APPCMD_BUFF_SIZE)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b20      	cmp	r3, #32
 8004772:	d905      	bls.n	8004780 <FMSTR_StoreAppCmd+0x58>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2285      	movs	r2, #133	; 0x85
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3301      	adds	r3, #1
 800477e:	e01c      	b.n	80047ba <FMSTR_StoreAppCmd+0x92>
    }
    
    /* store command data into dedicated buffer */
    pcm_nAppCmd = nCode;
 8004780:	7bba      	ldrb	r2, [r7, #14]
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <FMSTR_StoreAppCmd+0x9c>)
 8004784:	701a      	strb	r2, [r3, #0]
    pcm_nAppCmdLen = nArgsLen;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <FMSTR_StoreAppCmd+0xa0>)
 800478c:	801a      	strh	r2, [r3, #0]
    
    /* data copy */
    if(nArgsLen)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <FMSTR_StoreAppCmd+0x7c>
    {
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <FMSTR_StoreAppCmd+0xa4>)
 8004796:	613b      	str	r3, [r7, #16]
        
        /*lint -e{534} ignoring return value */
        FMSTR_CopyFromBuffer(appCmdBuffAddr, pMessageIO, (FMSTR_SIZE8) nArgsLen);
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	461a      	mov	r2, r3
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	6938      	ldr	r0, [r7, #16]
 80047a0:	f7ff feb6 	bl	8004510 <FMSTR_CopyFromBuffer>
    }

    /* mark command as "running" (without any response data) */
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_RUNNING;
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <FMSTR_StoreAppCmd+0xa8>)
 80047a6:	22fe      	movs	r2, #254	; 0xfe
 80047a8:	701a      	strb	r2, [r3, #0]
    pcm_nAppCmdResultDataLen = 0U;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <FMSTR_StoreAppCmd+0xac>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]

    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3301      	adds	r3, #1
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2000011d 	.word	0x2000011d
 80047c8:	20000140 	.word	0x20000140
 80047cc:	20000120 	.word	0x20000120
 80047d0:	20000142 	.word	0x20000142
 80047d4:	20000143 	.word	0x20000143

080047d8 <FMSTR_GetAppCmdStatus>:
*       sure the PC already got the command delivery packet acknowledged.
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdStatus(FMSTR_BPTR pMessageIO)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_PAPPCMDFUNC pFunc = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
    FMSTR_INDEX nIndex;
    
    /* time to execute the command's callback */
    if((nIndex = FMSTR_FindAppCmdCallIndex(pcm_nAppCmd)) >= 0)
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <FMSTR_GetAppCmdStatus+0x70>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f887 	bl	80048fc <FMSTR_FindAppCmdCallIndex>
 80047ee:	4603      	mov	r3, r0
 80047f0:	817b      	strh	r3, [r7, #10]
 80047f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db05      	blt.n	8004806 <FMSTR_GetAppCmdStatus+0x2e>
    {
        pFunc = pcm_pAppCmdCallFunc[nIndex];
 80047fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <FMSTR_GetAppCmdStatus+0x74>)
 8004800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004804:	60fb      	str	r3, [r7, #12]
    }
    
    /* valid callback function found? */
    if(pFunc)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <FMSTR_GetAppCmdStatus+0x50>
    {
        /* do execute callback, return value is app.cmd result code */
        pcm_nAppCmdResult = pFunc(pcm_nAppCmd, pcm_pAppCmdBuff, pcm_nAppCmdLen);
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <FMSTR_GetAppCmdStatus+0x70>)
 800480e:	7818      	ldrb	r0, [r3, #0]
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <FMSTR_GetAppCmdStatus+0x78>)
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	490f      	ldr	r1, [pc, #60]	; (8004854 <FMSTR_GetAppCmdStatus+0x7c>)
 8004818:	4798      	blx	r3
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <FMSTR_GetAppCmdStatus+0x80>)
 8004820:	701a      	strb	r2, [r3, #0]

        /* nothing more to do with this command (i.e. command acknowledged) */
        pcm_nAppCmd = FMSTR_APPCMDRESULT_NOCMD;
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <FMSTR_GetAppCmdStatus+0x70>)
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	701a      	strb	r2, [r3, #0]
    }
#endif

    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3301      	adds	r3, #1
 8004832:	607b      	str	r3, [r7, #4]
    return FMSTR_ValueToBuffer8(pMessageIO, (FMSTR_U8) pcm_nAppCmdResult);
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <FMSTR_GetAppCmdStatus+0x80>)
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3301      	adds	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	2000011d 	.word	0x2000011d
 800484c:	20000148 	.word	0x20000148
 8004850:	20000140 	.word	0x20000140
 8004854:	20000120 	.word	0x20000120
 8004858:	20000142 	.word	0x20000142

0800485c <FMSTR_GetAppCmdRespData>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdRespData(FMSTR_BPTR pMessageIO)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nDataLen;
    FMSTR_U8 nDataOffset;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE)FMSTR_APPCMDRESULT_NOCMD))
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <FMSTR_GetAppCmdRespData+0x94>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2bff      	cmp	r3, #255	; 0xff
 800486e:	d005      	beq.n	800487c <FMSTR_GetAppCmdRespData+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2287      	movs	r2, #135	; 0x87
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3301      	adds	r3, #1
 800487a:	e035      	b.n	80048e8 <FMSTR_GetAppCmdRespData+0x8c>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3301      	adds	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataLen, pMessageIO);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3301      	adds	r3, #1
 800488c:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataOffset, pMessageIO);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	73bb      	strb	r3, [r7, #14]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3301      	adds	r3, #1
 8004898:	607b      	str	r3, [r7, #4]

    /* the response would not fit into comm buffer */
    if(nDataLen > (FMSTR_U16)FMSTR_COMM_BUFFER_SIZE)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b3c      	cmp	r3, #60	; 0x3c
 800489e:	d905      	bls.n	80048ac <FMSTR_GetAppCmdRespData+0x50>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2284      	movs	r2, #132	; 0x84
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e01d      	b.n	80048e8 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    /* the data would be fetched outside the app.cmd response data */
    if((((FMSTR_U16)nDataOffset) + nDataLen) > (FMSTR_SIZE8)pcm_nAppCmdResultDataLen)
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	461a      	mov	r2, r3
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	4413      	add	r3, r2
 80048b4:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <FMSTR_GetAppCmdRespData+0x98>)
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	dd05      	ble.n	80048c8 <FMSTR_GetAppCmdRespData+0x6c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2286      	movs	r2, #134	; 0x86
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e00f      	b.n	80048e8 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	3301      	adds	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]

    /* copy to buffer */
    {    
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <FMSTR_GetAppCmdRespData+0x9c>)
 80048d6:	613b      	str	r3, [r7, #16]
        pResponse = FMSTR_CopyToBuffer(pResponse, appCmdBuffAddr, (FMSTR_SIZE8)nDataLen);
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	461a      	mov	r2, r3
 80048dc:	6939      	ldr	r1, [r7, #16]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff fdf6 	bl	80044d0 <FMSTR_CopyToBuffer>
 80048e4:	6178      	str	r0, [r7, #20]
    }
    
    return pResponse;
 80048e6:	697b      	ldr	r3, [r7, #20]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	2000011d 	.word	0x2000011d
 80048f4:	20000143 	.word	0x20000143
 80048f8:	20000120 	.word	0x20000120

080048fc <FMSTR_FindAppCmdCallIndex>:
* @return   Index of function pointer in our local tables
*
******************************************************************************/

static FMSTR_INDEX FMSTR_FindAppCmdCallIndex(FMSTR_APPCMD_CODE nAppcmdCode)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
#if FMSTR_MAX_APPCMD_CALLS > 0
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	81fb      	strh	r3, [r7, #14]
 800490a:	e00f      	b.n	800492c <FMSTR_FindAppCmdCallIndex+0x30>
    {
        if(pcm_pAppCmdCallId[i] == nAppcmdCode)
 800490c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004910:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <FMSTR_FindAppCmdCallIndex+0x48>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	429a      	cmp	r2, r3
 8004918:	d102      	bne.n	8004920 <FMSTR_FindAppCmdCallIndex+0x24>
        {
            return i;
 800491a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800491e:	e00b      	b.n	8004938 <FMSTR_FindAppCmdCallIndex+0x3c>
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8004920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004924:	b29b      	uxth	r3, r3
 8004926:	3301      	adds	r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	81fb      	strh	r3, [r7, #14]
 800492c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004930:	2b03      	cmp	r3, #3
 8004932:	ddeb      	ble.n	800490c <FMSTR_FindAppCmdCallIndex+0x10>
    /*lint -esym(528, FMSTR_FindAppCmdCallIndex) this function is 
      not referenced when APPCMD_CALLS are not used */
    FMSTR_UNUSED(nAppcmdCode);
#endif
        
    return -1;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000144 	.word	0x20000144

08004948 <FMSTR_Init>:
* @brief    FreeMASTER driver initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_Init(void)
{   
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
    FMSTR_InitTsa();
#endif

#if FMSTR_USE_SCOPE
    /* initialize Scope */
    FMSTR_InitScope();
 800494c:	f000 fc7c 	bl	8005248 <FMSTR_InitScope>
#endif

#if FMSTR_USE_RECORDER
    /* initialize Recorder */
    FMSTR_InitRec();
 8004950:	f000 f9c2 	bl	8004cd8 <FMSTR_InitRec>
#endif

#if FMSTR_USE_APPCMD
    /* initialize application commands */
    FMSTR_InitAppCmds();
 8004954:	f7ff feb8 	bl	80046c8 <FMSTR_InitAppCmds>
    FMSTR_InitPDBdm();
#endif  
    
#if FMSTR_USE_SERIAL
    /* initialize communication and start listening for commands */
    if (!FMSTR_InitSerial())
 8004958:	f000 fe3a 	bl	80055d0 <FMSTR_InitSerial>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <FMSTR_Init+0x1e>
        return FMSTR_FALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	e000      	b.n	8004968 <FMSTR_Init+0x20>
#if FMSTR_DEBUG_TX
    /* start in the debugging mode, we will be sending test frames periodically */
    pcm_bDebugTx = FMSTR_TRUE;
#endif

    return FMSTR_TRUE;
 8004966:	2301      	movs	r3, #1
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}

0800496c <FMSTR_ProtocolDecoder>:
* in this call as well.
*
******************************************************************************/

FMSTR_BOOL FMSTR_ProtocolDecoder(FMSTR_BPTR pMessageIO)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponseEnd;
    FMSTR_U8 nCmd;
    
    /* no EX access by default */
    FMSTR_SetExAddr(FMSTR_FALSE);
 8004974:	2000      	movs	r0, #0
 8004976:	f7ff fe59 	bl	800462c <FMSTR_SetExAddr>
    
    /* command code comes first in the message */
    /*lint -e{534} return value is not used */
    (void)FMSTR_ValueFromBuffer8(&nCmd, pMessageIO);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	72bb      	strb	r3, [r7, #10]
    
    /* process command   */
    switch (nCmd)
 8004980:	7abb      	ldrb	r3, [r7, #10]
 8004982:	2b10      	cmp	r3, #16
 8004984:	dc52      	bgt.n	8004a2c <FMSTR_ProtocolDecoder+0xc0>
 8004986:	2b04      	cmp	r3, #4
 8004988:	da30      	bge.n	80049ec <FMSTR_ProtocolDecoder+0x80>
 800498a:	e0ac      	b.n	8004ae6 <FMSTR_ProtocolDecoder+0x17a>
 800498c:	3bc0      	subs	r3, #192	; 0xc0
 800498e:	2b13      	cmp	r3, #19
 8004990:	f200 80a9 	bhi.w	8004ae6 <FMSTR_ProtocolDecoder+0x17a>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <FMSTR_ProtocolDecoder+0x30>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	08004add 	.word	0x08004add
 80049a0:	08004a6b 	.word	0x08004a6b
 80049a4:	08004a75 	.word	0x08004a75
 80049a8:	08004a61 	.word	0x08004a61
 80049ac:	08004ae7 	.word	0x08004ae7
 80049b0:	08004a57 	.word	0x08004a57
 80049b4:	08004aa9 	.word	0x08004aa9
 80049b8:	08004ae7 	.word	0x08004ae7
 80049bc:	08004ae7 	.word	0x08004ae7
 80049c0:	08004a8f 	.word	0x08004a8f
 80049c4:	08004ae7 	.word	0x08004ae7
 80049c8:	08004ae7 	.word	0x08004ae7
 80049cc:	08004ae7 	.word	0x08004ae7
 80049d0:	08004ae7 	.word	0x08004ae7
 80049d4:	08004ae7 	.word	0x08004ae7
 80049d8:	08004ae7 	.word	0x08004ae7
 80049dc:	08004ae7 	.word	0x08004ae7
 80049e0:	08004ae7 	.word	0x08004ae7
 80049e4:	08004ae7 	.word	0x08004ae7
 80049e8:	08004ab3 	.word	0x08004ab3
 80049ec:	3b04      	subs	r3, #4
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d879      	bhi.n	8004ae6 <FMSTR_ProtocolDecoder+0x17a>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <FMSTR_ProtocolDecoder+0x8c>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a37 	.word	0x08004a37
 80049fc:	08004abd 	.word	0x08004abd
 8004a00:	08004acd 	.word	0x08004acd
 8004a04:	08004ae7 	.word	0x08004ae7
 8004a08:	08004ae7 	.word	0x08004ae7
 8004a0c:	08004ae7 	.word	0x08004ae7
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a7f 	.word	0x08004a7f
 8004a18:	08004ae7 	.word	0x08004ae7
 8004a1c:	08004ae7 	.word	0x08004ae7
 8004a20:	08004ae7 	.word	0x08004ae7
 8004a24:	08004ae7 	.word	0x08004ae7
 8004a28:	08004a9f 	.word	0x08004a9f
 8004a2c:	2bd3      	cmp	r3, #211	; 0xd3
 8004a2e:	dc5a      	bgt.n	8004ae6 <FMSTR_ProtocolDecoder+0x17a>
 8004a30:	2bc0      	cmp	r3, #192	; 0xc0
 8004a32:	daab      	bge.n	800498c <FMSTR_ProtocolDecoder+0x20>
 8004a34:	e057      	b.n	8004ae6 <FMSTR_ProtocolDecoder+0x17a>
#if FMSTR_USE_READMEM

        /* read a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004a36:	2001      	movs	r0, #1
 8004a38:	f7ff fdf8 	bl	800462c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READMEM:
#endif
            pResponseEnd = FMSTR_ReadMem(pMessageIO);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8cd 	bl	8004bdc <FMSTR_ReadMem>
 8004a42:	60f8      	str	r0, [r7, #12]
            break;
 8004a44:	e056      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
#if FMSTR_USE_SCOPE

        /* prepare scope variables */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPSCOPE_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7ff fdf0 	bl	800462c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPSCOPE:
#endif
            pResponseEnd = FMSTR_SetUpScope(pMessageIO);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fc03 	bl	8005258 <FMSTR_SetUpScope>
 8004a52:	60f8      	str	r0, [r7, #12]
            break;  
 8004a54:	e04e      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
            
        case FMSTR_CMD_READSCOPE:
            pResponseEnd = FMSTR_ReadScope(pMessageIO);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fc58 	bl	800530c <FMSTR_ReadScope>
 8004a5c:	60f8      	str	r0, [r7, #12]
            break;
 8004a5e:	e049      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

#if FMSTR_USE_RECORDER

        /* get recorder status */
        case FMSTR_CMD_GETRECSTS:
            pResponseEnd = FMSTR_GetRecStatus(pMessageIO);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 faf9 	bl	8005058 <FMSTR_GetRecStatus>
 8004a66:	60f8      	str	r0, [r7, #12]
            break;
 8004a68:	e044      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

        /* start recorder */
        case FMSTR_CMD_STARTREC:
            pResponseEnd = FMSTR_StartRec(pMessageIO);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa7e 	bl	8004f6c <FMSTR_StartRec>
 8004a70:	60f8      	str	r0, [r7, #12]
            break;
 8004a72:	e03f      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

        /* stop recorder */
        case FMSTR_CMD_STOPREC:
            pResponseEnd = FMSTR_StopRec(pMessageIO);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fac7 	bl	8005008 <FMSTR_StopRec>
 8004a7a:	60f8      	str	r0, [r7, #12]
            break;
 8004a7c:	e03a      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

        /* setup recorder */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPREC_EX:                 
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f7ff fdd4 	bl	800462c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPREC:                    
#endif
            pResponseEnd = FMSTR_SetUpRec(pMessageIO);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f947 	bl	8004d18 <FMSTR_SetUpRec>
 8004a8a:	60f8      	str	r0, [r7, #12]
            break;
 8004a8c:	e032      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
            
        /* get recorder buffer information (force EX instead of non-EX) */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_GETRECBUFF_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7ff fdcc 	bl	800462c <FMSTR_SetExAddr>
#elif FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_GETRECBUFF:                  
#endif
            pResponseEnd = FMSTR_GetRecBuff(pMessageIO);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fb0f 	bl	80050b8 <FMSTR_GetRecBuff>
 8004a9a:	60f8      	str	r0, [r7, #12]
            break; 
 8004a9c:	e02a      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
 
#if FMSTR_USE_APPCMD

        /* accept the application command */
        case FMSTR_CMD_SENDAPPCMD:
            pResponseEnd = FMSTR_StoreAppCmd(pMessageIO);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fe42 	bl	8004728 <FMSTR_StoreAppCmd>
 8004aa4:	60f8      	str	r0, [r7, #12]
            break;
 8004aa6:	e025      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

        /* get the application command status */
        case FMSTR_CMD_GETAPPCMDSTS:
            pResponseEnd = FMSTR_GetAppCmdStatus(pMessageIO);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fe95 	bl	80047d8 <FMSTR_GetAppCmdStatus>
 8004aae:	60f8      	str	r0, [r7, #12]
            break;
 8004ab0:	e020      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>

        /* get the application command data */
        case FMSTR_CMD_GETAPPCMDDATA:
            pResponseEnd = FMSTR_GetAppCmdRespData(pMessageIO);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fed2 	bl	800485c <FMSTR_GetAppCmdRespData>
 8004ab8:	60f8      	str	r0, [r7, #12]
            break;
 8004aba:	e01b      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
#if FMSTR_USE_WRITEMEM

        /* write a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004abc:	2001      	movs	r0, #1
 8004abe:	f7ff fdb5 	bl	800462c <FMSTR_SetExAddr>
#endif          
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEM:
#endif
            pResponseEnd = FMSTR_WriteMem(pMessageIO);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8ba 	bl	8004c3c <FMSTR_WriteMem>
 8004ac8:	60f8      	str	r0, [r7, #12]
            break;
 8004aca:	e013      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
#if FMSTR_USE_WRITEMEMMASK

        /* write block of memory with a bit mask */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEMMASK_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8004acc:	2001      	movs	r0, #1
 8004ace:	f7ff fdad 	bl	800462c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEMMASK:
#endif
            pResponseEnd = FMSTR_WriteMemMask(pMessageIO);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8d9 	bl	8004c8a <FMSTR_WriteMemMask>
 8004ad8:	60f8      	str	r0, [r7, #12]
            break;
 8004ada:	e00b      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
        case FMSTR_CMD_GETINFOBRIEF:
#else   
        /* retrieve board information structure */
        case FMSTR_CMD_GETINFO: 
#endif
            pResponseEnd = FMSTR_GetBoardInfo(pMessageIO);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f81d 	bl	8004b1c <FMSTR_GetBoardInfo>
 8004ae2:	60f8      	str	r0, [r7, #12]
            break;
 8004ae4:	e006      	b.n	8004af4 <FMSTR_ProtocolDecoder+0x188>
            break;
#endif /* FMSTR_USE_PIPES */

        /* unknown command */
        default:
            pResponseEnd = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_INVCMD);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2281      	movs	r2, #129	; 0x81
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
            break;          
 8004af2:	bf00      	nop
    }
    
    /* anything to send back? */
    if(pResponseEnd != pMessageIO)
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d00a      	beq.n	8004b12 <FMSTR_ProtocolDecoder+0x1a6>
    {
        /*lint -e{946,960} subtracting pointers is appropriate here */
        FMSTR_SIZE8 nSize = (FMSTR_SIZE8)(pResponseEnd - pMessageIO);
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	72fb      	strb	r3, [r7, #11]
#if FMSTR_DEBUG_TX    
        /* the first sane frame received from PC Host ends test frame sending */
        pcm_bDebugTx = 0;
#endif
        FMSTR_SendResponse(pMessageIO, nSize);
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fcab 	bl	8005464 <FMSTR_SendResponse>
        return FMSTR_TRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <FMSTR_ProtocolDecoder+0x1a8>
    }
    else
    {
        /* nothing sent out */
        return FMSTR_FALSE;
 8004b12:	2300      	movs	r3, #0
    }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <FMSTR_GetBoardInfo>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetBoardInfo(FMSTR_BPTR pMessageIO)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]
    FMSTR_U16 wTmp;
    FMSTR_U8 *pStr;

    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);              
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_PROT_VER));            /* protVer */
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_FLAGS));           /* cfgFlags */
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_BUS_WIDTH));       /* dataBusWdt */
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3301      	adds	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MAJOR));  /* globVerMajor */
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	3301      	adds	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MINOR));  /* globVerMinor */
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_COMM_BUFFER_SIZE));    /* cmdBuffSize  */
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	223c      	movs	r2, #60	; 0x3c
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]

    /* recorder buffer size is always measured in bytes */
#if FMSTR_REC_LARGE_MODE
    wTmp = FMSTR_GetRecBuffSize()/64;
#else
    wTmp = FMSTR_GetRecBuffSize();
 8004b7c:	f000 fa92 	bl	80050a4 <FMSTR_GetRecBuffSize>
 8004b80:	4603      	mov	r3, r0
 8004b82:	827b      	strh	r3, [r7, #18]
#endif
    wTmp *= FMSTR_CFG_BUS_WIDTH;

    /* send size and timebase    */
    pResponse = FMSTR_ValueToBuffer16(pResponse, wTmp);
 8004b84:	8a7b      	ldrh	r3, [r7, #18]
 8004b86:	4619      	mov	r1, r3
 8004b88:	6978      	ldr	r0, [r7, #20]
 8004b8a:	f7ff fcff 	bl	800458c <FMSTR_ValueToBuffer16>
 8004b8e:	6178      	str	r0, [r7, #20]
    pResponse = FMSTR_ConstToBuffer16(pResponse, (FMSTR_U16) FMSTR_REC_TIMEBASE);
 8004b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b94:	6978      	ldr	r0, [r7, #20]
 8004b96:	f7ff fcf9 	bl	800458c <FMSTR_ValueToBuffer16>
 8004b9a:	6178      	str	r0, [r7, #20]
#if FMSTR_LIGHT_VERSION
FMSTR_UNUSED(pStr);
    pResponse = FMSTR_SkipInBuffer(pResponse, (FMSTR_U8)FMSTR_DESCR_SIZE);
#else
    /* description string */
    pStr = (FMSTR_U8*)  FMSTR_IDT_STRING;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <FMSTR_GetBoardInfo+0xbc>)
 8004b9e:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	827b      	strh	r3, [r7, #18]
 8004ba4:	e010      	b.n	8004bc8 <FMSTR_GetBoardInfo+0xac>
    {
        pResponse = FMSTR_ValueToBuffer8(pResponse, *pStr);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]

        /* terminating zero used to clear the remainder of the buffer */        
        if(*pStr)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <FMSTR_GetBoardInfo+0xa6>
        {
            pStr ++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 8004bc2:	8a7b      	ldrh	r3, [r7, #18]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	827b      	strh	r3, [r7, #18]
 8004bc8:	8a7b      	ldrh	r3, [r7, #18]
 8004bca:	2b18      	cmp	r3, #24
 8004bcc:	d9eb      	bls.n	8004ba6 <FMSTR_GetBoardInfo+0x8a>
    }
#endif /* SEND_IDT_STRING */
    
#endif /* FMSTR_USE_BRIEFINFO */

    return pResponse;   
 8004bce:	697b      	ldr	r3, [r7, #20]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08008040 	.word	0x08008040

08004bdc <FMSTR_ReadMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadMem(FMSTR_BPTR pMessageIO)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3302      	adds	r3, #2
 8004bec:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8004bfa:	f107 0310 	add.w	r3, r7, #16
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fd43 	bl	800468c <FMSTR_AddressFromBuffer>
 8004c06:	6078      	str	r0, [r7, #4]
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_EACCESS);
    }
#endif

    /* check the response will safely fit into comm buffer */
    if(nSize > (FMSTR_U8)FMSTR_COMM_BUFFER_SIZE)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b3c      	cmp	r3, #60	; 0x3c
 8004c0c:	d905      	bls.n	8004c1a <FMSTR_ReadMem+0x3e>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2284      	movs	r2, #132	; 0x84
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	e00c      	b.n	8004c34 <FMSTR_ReadMem+0x58>
    }
    
    /* success  */
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3301      	adds	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
    
    return FMSTR_CopyToBuffer(pResponse, nAddr, (FMSTR_SIZE8) nSize);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7ff fc4f 	bl	80044d0 <FMSTR_CopyToBuffer>
 8004c32:	4603      	mov	r3, r0
}   
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <FMSTR_WriteMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMem(FMSTR_BPTR pMessageIO)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	72fb      	strb	r3, [r7, #11]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3301      	adds	r3, #1
 8004c58:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8004c5a:	f107 030c 	add.w	r3, r7, #12
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fd13 	bl	800468c <FMSTR_AddressFromBuffer>
 8004c66:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMem_exit;
    }
#endif

    /*lint -e{534} ignoring function return value */
    FMSTR_CopyFromBuffer(nAddr, pMessageIO, (FMSTR_SIZE8) nSize);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	7afa      	ldrb	r2, [r7, #11]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fc4e 	bl	8004510 <FMSTR_CopyFromBuffer>
    nResponseCode = FMSTR_STS_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteMem_exit:
#endif      
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	7cfa      	ldrb	r2, [r7, #19]
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <FMSTR_WriteMemMask>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMemMask(FMSTR_BPTR pMessageIO)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3302      	adds	r3, #2
 8004c9a:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	72fb      	strb	r3, [r7, #11]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8004ca8:	f107 030c 	add.w	r3, r7, #12
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fcec 	bl	800468c <FMSTR_AddressFromBuffer>
 8004cb4:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMemMask_exit;
    }
#endif

    /* put the data */
    FMSTR_CopyFromBufferWithMask(nAddr, pMessageIO, (FMSTR_SIZE8)nSize);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	7afa      	ldrb	r2, [r7, #11]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fc76 	bl	80045ae <FMSTR_CopyFromBufferWithMask>
    nResponseCode = FMSTR_STS_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	74fb      	strb	r3, [r7, #19]

#if (FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY) || (FMSTR_CFG_BUS_WIDTH > 1U)
FMSTR_WriteMemMask_exit:
#endif  
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	7cfa      	ldrb	r2, [r7, #19]
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3301      	adds	r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <FMSTR_InitRec>:
* @brief    Recorder Initialization
*
******************************************************************************/

void FMSTR_InitRec(void)
{   
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
    /* initialize Recorder flags*/
    pcm_wRecFlags.all = 0U;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <FMSTR_InitRec+0x1c>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
#elif FMSTR_USE_FASTREC
    /* Initialize Fast Recorder Buffer  */
    FMSTR_InitFastRec();
#else
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <FMSTR_InitRec+0x20>)
 8004ce4:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <FMSTR_InitRec+0x24>)
 8004ce6:	601a      	str	r2, [r3, #0]
    
    /*lint -esym(528, pcm_pOwnRecBuffer) this symbol is used outside of lint sight */
#endif

}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000190 	.word	0x20000190
 8004cf8:	200001ac 	.word	0x200001ac
 8004cfc:	200001b4 	.word	0x200001b4

08004d00 <FMSTR_AbortRec>:
* @brief    Abort and de-initialize recorder
*
******************************************************************************/

static void FMSTR_AbortRec(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    /* clear flags */
    pcm_wRecFlags.all = 0U;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <FMSTR_AbortRec+0x14>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000190 	.word	0x20000190

08004d18 <FMSTR_SetUpRec>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpRec(FMSTR_BPTR pMessageIO)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	613b      	str	r3, [r7, #16]
    FMSTR_SIZE_RECBUFF blen;
    FMSTR_U8 i, sz;
    FMSTR_U8 nResponseCode;
    
    /* de-initialize first   */
    FMSTR_AbortRec();
 8004d24:	f7ff ffec 	bl	8004d00 <FMSTR_AbortRec>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
    }
#elif (FMSTR_USE_FASTREC) == 0
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 8004d28:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <FMSTR_SetUpRec+0x1c0>)
 8004d2a:	4a6c      	ldr	r2, [pc, #432]	; (8004edc <FMSTR_SetUpRec+0x1c4>)
 8004d2c:	601a      	str	r2, [r3, #0]
#endif

    /* seek the setup data */
#if (FMSTR_USE_FASTREC) == 0
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3302      	adds	r3, #2
 8004d32:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecTriggerMode, pMessageIO);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	4b69      	ldr	r3, [pc, #420]	; (8004ee0 <FMSTR_SetUpRec+0x1c8>)
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 3U);
#endif /* (FMSTR_USE_FASTREC) == 0 */

    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTotalSmps, pMessageIO);
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4867      	ldr	r0, [pc, #412]	; (8004ee4 <FMSTR_SetUpRec+0x1cc>)
 8004d46:	f7ff fc03 	bl	8004550 <FMSTR_ValueFromBuffer16>
 8004d4a:	6078      	str	r0, [r7, #4]

#if (FMSTR_REC_STATIC_POSTTRIG) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecPostTrigger, pMessageIO);
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4866      	ldr	r0, [pc, #408]	; (8004ee8 <FMSTR_SetUpRec+0x1d0>)
 8004d50:	f7ff fbfe 	bl	8004550 <FMSTR_ValueFromBuffer16>
 8004d54:	6078      	str	r0, [r7, #4]
#else /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */

#if (FMSTR_REC_STATIC_DIVISOR) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTimeDiv, pMessageIO);
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4864      	ldr	r0, [pc, #400]	; (8004eec <FMSTR_SetUpRec+0x1d4>)
 8004d5a:	f7ff fbf9 	bl	8004550 <FMSTR_ValueFromBuffer16>
 8004d5e:	6078      	str	r0, [r7, #4]
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_DIVISOR) == 0 */

#if (FMSTR_USE_FASTREC) == 0
    /* address & size of trigger variable */
    pMessageIO = FMSTR_AddressFromBuffer(&pcm_nTrgVarAddr, pMessageIO);
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4863      	ldr	r0, [pc, #396]	; (8004ef0 <FMSTR_SetUpRec+0x1d8>)
 8004d64:	f7ff fc92 	bl	800468c <FMSTR_AddressFromBuffer>
 8004d68:	6078      	str	r0, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nTrgVarSize, pMessageIO);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <FMSTR_SetUpRec+0x1dc>)
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3301      	adds	r3, #1
 8004d76:	607b      	str	r3, [r7, #4]

    /* trigger compare mode  */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_bTrgVarSigned, pMessageIO);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	4b5e      	ldr	r3, [pc, #376]	; (8004ef8 <FMSTR_SetUpRec+0x1e0>)
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]

    /* threshold value  */
    pMessageIO = FMSTR_ValueFromBuffer32(&pcm_uTrgThreshold.u32, pMessageIO);
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	485c      	ldr	r0, [pc, #368]	; (8004efc <FMSTR_SetUpRec+0x1e4>)
 8004d8a:	f7ff fbf0 	bl	800456e <FMSTR_ValueFromBuffer32>
 8004d8e:	6078      	str	r0, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 8U);
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* recorder variable count */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecVarCount, pMessageIO);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <FMSTR_SetUpRec+0x1e8>)
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]

    /* rec variable information must fit into our buffers */
    if((!pcm_nRecVarCount) || (pcm_nRecVarCount > (FMSTR_U8)FMSTR_MAX_REC_VARS))
 8004d9e:	4b58      	ldr	r3, [pc, #352]	; (8004f00 <FMSTR_SetUpRec+0x1e8>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <FMSTR_SetUpRec+0x96>
 8004da6:	4b56      	ldr	r3, [pc, #344]	; (8004f00 <FMSTR_SetUpRec+0x1e8>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d902      	bls.n	8004db4 <FMSTR_SetUpRec+0x9c>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVBUFF;
 8004dae:	2385      	movs	r3, #133	; 0x85
 8004db0:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 8004db2:	e087      	b.n	8004ec4 <FMSTR_SetUpRec+0x1ac>
#endif
    }

    /* calculate sum of sizes of all variables */
    nRecVarsetSize = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]

    /* get all addresses and sizes */
    for(i=0U; i<pcm_nRecVarCount; i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	75bb      	strb	r3, [r7, #22]
 8004dbc:	e022      	b.n	8004e04 <FMSTR_SetUpRec+0xec>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	737b      	strb	r3, [r7, #13]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
        
        pcm_pRecVarSize[i] = sz;
 8004dca:	7dbb      	ldrb	r3, [r7, #22]
 8004dcc:	7b79      	ldrb	r1, [r7, #13]
 8004dce:	4a4d      	ldr	r2, [pc, #308]	; (8004f04 <FMSTR_SetUpRec+0x1ec>)
 8004dd0:	54d1      	strb	r1, [r2, r3]
        nRecVarsetSize += sz;
 8004dd2:	7b7a      	ldrb	r2, [r7, #13]
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	75fb      	strb	r3, [r7, #23]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pRecVarAddr[i], pMessageIO);
 8004dda:	7dbb      	ldrb	r3, [r7, #22]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <FMSTR_SetUpRec+0x1f0>)
 8004de0:	4413      	add	r3, r2
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fc51 	bl	800468c <FMSTR_AddressFromBuffer>
 8004dea:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if((sz == 0U) || (sz > 8U))
 8004dec:	7b7b      	ldrb	r3, [r7, #13]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <FMSTR_SetUpRec+0xe0>
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d902      	bls.n	8004dfe <FMSTR_SetUpRec+0xe6>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 8004df8:	2386      	movs	r3, #134	; 0x86
 8004dfa:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8004dfc:	e062      	b.n	8004ec4 <FMSTR_SetUpRec+0x1ac>
    for(i=0U; i<pcm_nRecVarCount; i++)
 8004dfe:	7dbb      	ldrb	r3, [r7, #22]
 8004e00:	3301      	adds	r3, #1
 8004e02:	75bb      	strb	r3, [r7, #22]
 8004e04:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <FMSTR_SetUpRec+0x1e8>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	7dba      	ldrb	r2, [r7, #22]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3d7      	bcc.n	8004dbe <FMSTR_SetUpRec+0xa6>
    }

    /* fast recorder handles trigger by itself */
#if (FMSTR_USE_FASTREC) == 0
    /* any trigger? */
    pcm_pCompareFunc = NULL;
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <FMSTR_SetUpRec+0x1f4>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
    if(pcm_nRecTriggerMode)
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <FMSTR_SetUpRec+0x1c8>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d034      	beq.n	8004e86 <FMSTR_SetUpRec+0x16e>
        {
            pcm_pCompareFunc = FMSTR_Comparefloat;
        }
        else
#else
        if(pcm_bTrgVarSigned&FMSTR_REC_FLOAT_TRIG_MASK)
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <FMSTR_SetUpRec+0x1e0>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <FMSTR_SetUpRec+0x116>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_FLOATDISABLED;
 8004e28:	2390      	movs	r3, #144	; 0x90
 8004e2a:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8004e2c:	e04a      	b.n	8004ec4 <FMSTR_SetUpRec+0x1ac>
#endif
        }
#endif
        {
        switch(pcm_nTrgVarSize)
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <FMSTR_SetUpRec+0x1dc>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d01a      	beq.n	8004e6c <FMSTR_SetUpRec+0x154>
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	dc22      	bgt.n	8004e80 <FMSTR_SetUpRec+0x168>
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d002      	beq.n	8004e44 <FMSTR_SetUpRec+0x12c>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d00a      	beq.n	8004e58 <FMSTR_SetUpRec+0x140>
 8004e42:	e01d      	b.n	8004e80 <FMSTR_SetUpRec+0x168>
        {
#if FMSTR_CFG_BUS_WIDTH == 1U
        case 1: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare8S : FMSTR_Compare8U; break;
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <FMSTR_SetUpRec+0x1e0>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <FMSTR_SetUpRec+0x138>
 8004e4c:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <FMSTR_SetUpRec+0x1f8>)
 8004e4e:	e000      	b.n	8004e52 <FMSTR_SetUpRec+0x13a>
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <FMSTR_SetUpRec+0x1fc>)
 8004e52:	4a2e      	ldr	r2, [pc, #184]	; (8004f0c <FMSTR_SetUpRec+0x1f4>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e017      	b.n	8004e88 <FMSTR_SetUpRec+0x170>
#endif
        case 2: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare16S : FMSTR_Compare16U; break;
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <FMSTR_SetUpRec+0x1e0>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <FMSTR_SetUpRec+0x14c>
 8004e60:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <FMSTR_SetUpRec+0x200>)
 8004e62:	e000      	b.n	8004e66 <FMSTR_SetUpRec+0x14e>
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <FMSTR_SetUpRec+0x204>)
 8004e66:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <FMSTR_SetUpRec+0x1f4>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e00d      	b.n	8004e88 <FMSTR_SetUpRec+0x170>
        case 4: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare32S : FMSTR_Compare32U; break;
 8004e6c:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <FMSTR_SetUpRec+0x1e0>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <FMSTR_SetUpRec+0x160>
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <FMSTR_SetUpRec+0x208>)
 8004e76:	e000      	b.n	8004e7a <FMSTR_SetUpRec+0x162>
 8004e78:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <FMSTR_SetUpRec+0x20c>)
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <FMSTR_SetUpRec+0x1f4>)
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e003      	b.n	8004e88 <FMSTR_SetUpRec+0x170>
        /* invalid trigger variable size  */
        default:
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 8004e80:	2386      	movs	r3, #134	; 0x86
 8004e82:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8004e84:	e01e      	b.n	8004ec4 <FMSTR_SetUpRec+0x1ac>
#endif
            }
        }
 8004e86:	bf00      	nop
    }
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* total recorder buffer length in native sizeof units (=bytes on most platforms) */
    blen = (FMSTR_SIZE_RECBUFF) (pcm_wRecTotalSmps * nRecVarsetSize / FMSTR_CFG_BUS_WIDTH);
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <FMSTR_SetUpRec+0x1cc>)
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	fb12 f303 	smulbb	r3, r2, r3
 8004e94:	81fb      	strh	r3, [r7, #14]

    /* recorder memory available? */
    if(blen > FMSTR_GetRecBuffSize())
 8004e96:	f000 f905 	bl	80050a4 <FMSTR_GetRecBuffSize>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	89fb      	ldrh	r3, [r7, #14]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d902      	bls.n	8004eaa <FMSTR_SetUpRec+0x192>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVSIZE;
 8004ea4:	2386      	movs	r3, #134	; 0x86
 8004ea6:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 8004ea8:	e00c      	b.n	8004ec4 <FMSTR_SetUpRec+0x1ac>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* remember the effective end of circular buffer */
    pcm_dwRecEndBuffPtr = pcm_nRecBuffAddr + blen;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <FMSTR_SetUpRec+0x1c0>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <FMSTR_SetUpRec+0x210>)
 8004eb4:	6013      	str	r3, [r2, #0]
#endif /* FMSTR_REC_COMMON_ERR_CODES */
    }
#endif /* FMSTR_USE_FASTREC */

    /* everything is okay    */
    pcm_wRecFlags.flg.bIsConfigured = 1U;
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <FMSTR_SetUpRec+0x214>)
 8004eb8:	7813      	ldrb	r3, [r2, #0]
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	7013      	strb	r3, [r2, #0]
    nResponseCode = FMSTR_STS_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	757b      	strb	r3, [r7, #21]
    goto FMSTR_SetUpRec_exit;
FMSTR_SetUpRec_exit_error:
    nResponseCode = FMSTR_STC_INVSIZE;
#endif
FMSTR_SetUpRec_exit:
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	7d7a      	ldrb	r2, [r7, #21]
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	3301      	adds	r3, #1
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200001ac 	.word	0x200001ac
 8004edc:	200001b4 	.word	0x200001b4
 8004ee0:	2000015c 	.word	0x2000015c
 8004ee4:	20000158 	.word	0x20000158
 8004ee8:	2000015a 	.word	0x2000015a
 8004eec:	2000015e 	.word	0x2000015e
 8004ef0:	200001a0 	.word	0x200001a0
 8004ef4:	200001a4 	.word	0x200001a4
 8004ef8:	200001a5 	.word	0x200001a5
 8004efc:	200001a8 	.word	0x200001a8
 8004f00:	20000160 	.word	0x20000160
 8004f04:	20000184 	.word	0x20000184
 8004f08:	20000164 	.word	0x20000164
 8004f0c:	200001b0 	.word	0x200001b0
 8004f10:	08005139 	.word	0x08005139
 8004f14:	08005169 	.word	0x08005169
 8004f18:	08005195 	.word	0x08005195
 8004f1c:	080051c5 	.word	0x080051c5
 8004f20:	080051f1 	.word	0x080051f1
 8004f24:	0800521d 	.word	0x0800521d
 8004f28:	2000019c 	.word	0x2000019c
 8004f2c:	20000190 	.word	0x20000190

08004f30 <FMSTR_TriggerRec>:
* This function starts the post-trigger stop countdown
*
******************************************************************************/

void FMSTR_TriggerRec(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
    if(!pcm_wRecFlags.flg.bIsStopping)
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <FMSTR_TriggerRec+0x30>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d108      	bne.n	8004f54 <FMSTR_TriggerRec+0x24>
    {
        pcm_wRecFlags.flg.bIsStopping = 1U;
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <FMSTR_TriggerRec+0x30>)
 8004f44:	7813      	ldrb	r3, [r2, #0]
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	7013      	strb	r3, [r2, #0]
#if (FMSTR_REC_STATIC_POSTTRIG) == 0
        pcm_wStoprecCountDown = pcm_wRecPostTrigger;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <FMSTR_TriggerRec+0x34>)
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <FMSTR_TriggerRec+0x38>)
 8004f52:	801a      	strh	r2, [r3, #0]
#else
        pcm_wStoprecCountDown = FMSTR_REC_STATIC_POSTTRIG;
#endif
    }
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000190 	.word	0x20000190
 8004f64:	2000015a 	.word	0x2000015a
 8004f68:	2000018e 	.word	0x2000018e

08004f6c <FMSTR_StartRec>:
* and flags)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StartRec(FMSTR_BPTR pMessageIO)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
     FMSTR_U8 nResponseCode;   
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <FMSTR_StartRec+0x1c>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STC_NOTINIT;
 8004f82:	2388      	movs	r3, #136	; 0x88
 8004f84:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 8004f86:	e029      	b.n	8004fdc <FMSTR_StartRec+0x70>
#endif
    }
        
    /* already running ? */
    if(pcm_wRecFlags.flg.bIsRunning)
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <FMSTR_StartRec+0x30>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STS_RECRUN;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 8004f9a:	e01f      	b.n	8004fdc <FMSTR_StartRec+0x70>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* initialize write pointer */
    pcm_dwRecWritePtr = pcm_nRecBuffAddr;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <FMSTR_StartRec+0x8c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <FMSTR_StartRec+0x90>)
 8004fa2:	6013      	str	r3, [r2, #0]

    /* current (first) sample index */
    pcm_wRecBuffStartIx = 0U;
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <FMSTR_StartRec+0x94>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	801a      	strh	r2, [r3, #0]
#endif /* (FMSTR_USE_FASTREC) == 0 */

    /* initialize time divisor */
#if (FMSTR_REC_STATIC_DIVISOR) != 1
    pcm_wRecTimeDivCtr = 0U;
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <FMSTR_StartRec+0x98>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	801a      	strh	r2, [r3, #0]
#endif

    /* initiate virgin cycle */
    pcm_wRecFlags.flg.bIsStopping = 0U;          /* no trigger active */
 8004fb0:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004fb2:	7813      	ldrb	r3, [r2, #0]
 8004fb4:	f36f 0382 	bfc	r3, #2, #1
 8004fb8:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bTrgCrossActive = 0U;      /* waiting for threshold crossing */
 8004fba:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004fbc:	7813      	ldrb	r3, [r2, #0]
 8004fbe:	f36f 1304 	bfc	r3, #4, #1
 8004fc2:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bInvirginCycle = 1U;       /* initial cycle */
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004fc6:	7813      	ldrb	r3, [r2, #0]
 8004fc8:	f043 0308 	orr.w	r3, r3, #8
 8004fcc:	7013      	strb	r3, [r2, #0]
#if FMSTR_USE_FASTREC
    FMSTR_StartFastRec();
#endif /* (MSTR_USE_FASTREC */

    /* run now */
    pcm_wRecFlags.flg.bIsRunning = 1U;           /* is running now! */
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <FMSTR_StartRec+0x88>)
 8004fd0:	7813      	ldrb	r3, [r2, #0]
 8004fd2:	f043 0302 	orr.w	r3, r3, #2
 8004fd6:	7013      	strb	r3, [r2, #0]

    nResponseCode = FMSTR_STS_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]
FMSTR_StartRec_exit_error:
    nResponseCode = FMSTR_STC_NOTINIT;
#endif

FMSTR_StartRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7bfa      	ldrb	r2, [r7, #15]
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3301      	adds	r3, #1
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000190 	.word	0x20000190
 8004ff8:	200001ac 	.word	0x200001ac
 8004ffc:	20000198 	.word	0x20000198
 8005000:	20000194 	.word	0x20000194
 8005004:	2000018c 	.word	0x2000018c

08005008 <FMSTR_StopRec>:
* This function stops recording (same as manual trigger)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StopRec(FMSTR_BPTR pMessageIO)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
    FMSTR_U8 nResponseCode;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <FMSTR_StopRec+0x4c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <FMSTR_StopRec+0x1c>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 800501e:	2388      	movs	r3, #136	; 0x88
 8005020:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 8005022:	e00d      	b.n	8005040 <FMSTR_StopRec+0x38>
    }
        
    /* already stopped ? */
    if(!pcm_wRecFlags.flg.bIsRunning)
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <FMSTR_StopRec+0x4c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <FMSTR_StopRec+0x30>
    {
        nResponseCode = FMSTR_STS_RECDONE;
 8005032:	2302      	movs	r3, #2
 8005034:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 8005036:	e003      	b.n	8005040 <FMSTR_StopRec+0x38>
    }
    
    /* simulate trigger */
    FMSTR_TriggerRec();
 8005038:	f7ff ff7a 	bl	8004f30 <FMSTR_TriggerRec>
    nResponseCode = FMSTR_STS_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]
    
FMSTR_StopRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7bfa      	ldrb	r2, [r7, #15]
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3301      	adds	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000190 	.word	0x20000190

08005058 <FMSTR_GetRecStatus>:
* This function returns current recorder status
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecStatus(FMSTR_BPTR pMessageIO)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
    FMSTR_U16 nResponseCode = (FMSTR_U16) (pcm_wRecFlags.flg.bIsRunning ? 
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <FMSTR_GetRecStatus+0x48>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <FMSTR_GetRecStatus+0x1a>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <FMSTR_GetRecStatus+0x1c>
 8005072:	2302      	movs	r3, #2
 8005074:	81fb      	strh	r3, [r7, #14]
        FMSTR_STS_RECRUN : FMSTR_STS_RECDONE);
    
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <FMSTR_GetRecStatus+0x48>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <FMSTR_GetRecStatus+0x30>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 8005084:	2388      	movs	r3, #136	; 0x88
 8005086:	81fb      	strh	r3, [r7, #14]
    }
        
    /* get run/stop status */
    return FMSTR_ConstToBuffer8(pMessageIO, (FMSTR_U8) nResponseCode);
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	20000190 	.word	0x20000190

080050a4 <FMSTR_GetRecBuffSize>:
* @return   Recorder memory size in native sizeof units (=bytes on most platforms)
*
******************************************************************************/

FMSTR_SIZE_RECBUFF FMSTR_GetRecBuffSize()
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
#if FMSTR_REC_OWNBUFF
    return pcm_wRecBuffSize;
#else
    return (FMSTR_SIZE_RECBUFF) FMSTR_REC_BUFF_SIZE;
 80050a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
#endif
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <FMSTR_GetRecBuff>:
* This function returns recorder buffer information
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecBuff(FMSTR_BPTR pMessageIO)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    volatile FMSTR_BPTR pResponse;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <FMSTR_GetRecBuff+0x74>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <FMSTR_GetRecBuff+0x22>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2288      	movs	r2, #136	; 0x88
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3301      	adds	r3, #1
 80050d8:	e023      	b.n	8005122 <FMSTR_GetRecBuff+0x6a>
    }
    
    /* must be stopped */
    if(pcm_wRecFlags.flg.bIsRunning)
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <FMSTR_GetRecBuff+0x74>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <FMSTR_GetRecBuff+0x3c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_SERVBUSY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2287      	movs	r2, #135	; 0x87
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3301      	adds	r3, #1
 80050f2:	e016      	b.n	8005122 <FMSTR_GetRecBuff+0x6a>
    }
    
    /* fill the return info */
    pResponse = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
    pResponse = FMSTR_AddressToBuffer(pResponse, pcm_nRecBuffAddr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <FMSTR_GetRecBuff+0x78>)
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fa9f 	bl	800464c <FMSTR_AddressToBuffer>
 800510e:	4603      	mov	r3, r0
 8005110:	60fb      	str	r3, [r7, #12]
    return FMSTR_ValueToBuffer16(pResponse, pcm_wRecBuffStartIx);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a07      	ldr	r2, [pc, #28]	; (8005134 <FMSTR_GetRecBuff+0x7c>)
 8005116:	8812      	ldrh	r2, [r2, #0]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fa36 	bl	800458c <FMSTR_ValueToBuffer16>
 8005120:	4603      	mov	r3, r0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000190 	.word	0x20000190
 8005130:	200001ac 	.word	0x200001ac
 8005134:	20000194 	.word	0x20000194

08005138 <FMSTR_Compare8S>:
#define CMP(v,t) ((FMSTR_BOOL)(((v) < (t)) ? 0 : 1))

#if FMSTR_CFG_BUS_WIDTH == 1U

static FMSTR_BOOL FMSTR_Compare8S()
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS8(pcm_nTrgVarAddr), pcm_uTrgThreshold.s8);
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <FMSTR_Compare8S+0x28>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f993 2000 	ldrsb.w	r2, [r3]
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <FMSTR_Compare8S+0x2c>)
 8005146:	f993 3000 	ldrsb.w	r3, [r3]
 800514a:	429a      	cmp	r2, r3
 800514c:	bfac      	ite	ge
 800514e:	2301      	movge	r3, #1
 8005150:	2300      	movlt	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	b2db      	uxtb	r3, r3
}
 8005156:	4618      	mov	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	200001a0 	.word	0x200001a0
 8005164:	200001a8 	.word	0x200001a8

08005168 <FMSTR_Compare8U>:

static FMSTR_BOOL FMSTR_Compare8U()
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU8(pcm_nTrgVarAddr), pcm_uTrgThreshold.u8);
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <FMSTR_Compare8U+0x24>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	4b07      	ldr	r3, [pc, #28]	; (8005190 <FMSTR_Compare8U+0x28>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	bf2c      	ite	cs
 800517a:	2301      	movcs	r3, #1
 800517c:	2300      	movcc	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	b2db      	uxtb	r3, r3
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	200001a0 	.word	0x200001a0
 8005190:	200001a8 	.word	0x200001a8

08005194 <FMSTR_Compare16S>:

#endif

static FMSTR_BOOL FMSTR_Compare16S()
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS16(pcm_nTrgVarAddr), pcm_uTrgThreshold.s16);
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <FMSTR_Compare16S+0x28>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <FMSTR_Compare16S+0x2c>)
 80051a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bfac      	ite	ge
 80051aa:	2301      	movge	r3, #1
 80051ac:	2300      	movlt	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	200001a0 	.word	0x200001a0
 80051c0:	200001a8 	.word	0x200001a8

080051c4 <FMSTR_Compare16U>:

static FMSTR_BOOL FMSTR_Compare16U()
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU16(pcm_nTrgVarAddr), pcm_uTrgThreshold.u16);
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <FMSTR_Compare16U+0x24>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	881a      	ldrh	r2, [r3, #0]
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <FMSTR_Compare16U+0x28>)
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bf2c      	ite	cs
 80051d6:	2301      	movcs	r3, #1
 80051d8:	2300      	movcc	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	b2db      	uxtb	r3, r3
}
 80051de:	4618      	mov	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	200001a0 	.word	0x200001a0
 80051ec:	200001a8 	.word	0x200001a8

080051f0 <FMSTR_Compare32S>:

static FMSTR_BOOL FMSTR_Compare32S()
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS32(pcm_nTrgVarAddr), pcm_uTrgThreshold.s32);
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <FMSTR_Compare32S+0x24>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <FMSTR_Compare32S+0x28>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bfac      	ite	ge
 8005202:	2301      	movge	r3, #1
 8005204:	2300      	movlt	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	b2db      	uxtb	r3, r3
}
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	200001a0 	.word	0x200001a0
 8005218:	200001a8 	.word	0x200001a8

0800521c <FMSTR_Compare32U>:

static FMSTR_BOOL FMSTR_Compare32U()
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU32(pcm_nTrgVarAddr), pcm_uTrgThreshold.u32);
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <FMSTR_Compare32U+0x24>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <FMSTR_Compare32U+0x28>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	bf2c      	ite	cs
 800522e:	2301      	movcs	r3, #1
 8005230:	2300      	movcc	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	b2db      	uxtb	r3, r3
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	200001a0 	.word	0x200001a0
 8005244:	200001a8 	.word	0x200001a8

08005248 <FMSTR_InitScope>:
* @brief    Scope Initialization
*
******************************************************************************/

void FMSTR_InitScope(void)
{   
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <FMSTR_SetUpScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpScope(FMSTR_BPTR pMessageIO)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	613b      	str	r3, [r7, #16]
    FMSTR_U8 i, sz, nVarCnt;

    /* uninitialize scope */
    pcm_nScopeVarCount = 0U;
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <FMSTR_SetUpScope+0xa8>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]

    /* seek the setup data */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3302      	adds	r3, #2
 800526e:	607b      	str	r3, [r7, #4]
    
    /* scope variable count  */
    pMessageIO = FMSTR_ValueFromBuffer8(&nVarCnt, pMessageIO);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	73bb      	strb	r3, [r7, #14]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3301      	adds	r3, #1
 800527a:	607b      	str	r3, [r7, #4]

    /* scope variable information must fit into our buffers */
    if(!nVarCnt || nVarCnt > (FMSTR_U8)FMSTR_MAX_SCOPE_VARS)
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <FMSTR_SetUpScope+0x30>
 8005282:	7bbb      	ldrb	r3, [r7, #14]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d905      	bls.n	8005294 <FMSTR_SetUpScope+0x3c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2285      	movs	r2, #133	; 0x85
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3301      	adds	r3, #1
 8005292:	e030      	b.n	80052f6 <FMSTR_SetUpScope+0x9e>
    }
    
    /* get all addresses and sizes */
    for(i=0U; i<nVarCnt; i++)
 8005294:	2300      	movs	r3, #0
 8005296:	75fb      	strb	r3, [r7, #23]
 8005298:	e021      	b.n	80052de <FMSTR_SetUpScope+0x86>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3301      	adds	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
        pcm_pScopeVarSize[i] = sz;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	7bf9      	ldrb	r1, [r7, #15]
 80052aa:	4a16      	ldr	r2, [pc, #88]	; (8005304 <FMSTR_SetUpScope+0xac>)
 80052ac:	54d1      	strb	r1, [r2, r3]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pScopeVarAddr[i], pMessageIO);
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <FMSTR_SetUpScope+0xb0>)
 80052b4:	4413      	add	r3, r2
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f9e7 	bl	800468c <FMSTR_AddressFromBuffer>
 80052be:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if(sz == 0U || sz > 8U)
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <FMSTR_SetUpScope+0x74>
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d905      	bls.n	80052d8 <FMSTR_SetUpScope+0x80>
        {
            return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2286      	movs	r2, #134	; 0x86
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3301      	adds	r3, #1
 80052d6:	e00e      	b.n	80052f6 <FMSTR_SetUpScope+0x9e>
    for(i=0U; i<nVarCnt; i++)
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	3301      	adds	r3, #1
 80052dc:	75fb      	strb	r3, [r7, #23]
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	7dfa      	ldrb	r2, [r7, #23]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d3d9      	bcc.n	800529a <FMSTR_SetUpScope+0x42>
#endif
        
    }

    /* activate scope */
    pcm_nScopeVarCount = nVarCnt;
 80052e6:	7bba      	ldrb	r2, [r7, #14]
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <FMSTR_SetUpScope+0xa8>)
 80052ea:	701a      	strb	r2, [r3, #0]

    /* return just a status */
    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200005b4 	.word	0x200005b4
 8005304:	200005d8 	.word	0x200005d8
 8005308:	200005b8 	.word	0x200005b8

0800530c <FMSTR_ReadScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadScope(FMSTR_BPTR pMessageIO)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
    FMSTR_U8 i;
    
    if(!pcm_nScopeVarCount)
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <FMSTR_ReadScope+0x60>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <FMSTR_ReadScope+0x1c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2288      	movs	r2, #136	; 0x88
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3301      	adds	r3, #1
 8005326:	e01d      	b.n	8005364 <FMSTR_ReadScope+0x58>
    }
    
    /* success */
    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3301      	adds	r3, #1
 8005332:	607b      	str	r3, [r7, #4]
    
    for (i=0U; i<pcm_nScopeVarCount; i++)
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e00e      	b.n	8005358 <FMSTR_ReadScope+0x4c>
    {
        pMessageIO = FMSTR_CopyToBuffer(pMessageIO, pcm_pScopeVarAddr[i], pcm_pScopeVarSize[i]);
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <FMSTR_ReadScope+0x64>)
 800533e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <FMSTR_ReadScope+0x68>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	461a      	mov	r2, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff f8c0 	bl	80044d0 <FMSTR_CopyToBuffer>
 8005350:	6078      	str	r0, [r7, #4]
    for (i=0U; i<pcm_nScopeVarCount; i++)
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	3301      	adds	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <FMSTR_ReadScope+0x60>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3eb      	bcc.n	800533a <FMSTR_ReadScope+0x2e>
    } 
        
    /* return end position */
    return pMessageIO;  
 8005362:	687b      	ldr	r3, [r7, #4]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200005b4 	.word	0x200005b4
 8005370:	200005b8 	.word	0x200005b8
 8005374:	200005d8 	.word	0x200005d8

08005378 <FMSTR_InitUSB>:
* @brief    USB CDC communication interface initialization
*
******************************************************************************/

static FMSTR_BOOL FMSTR_InitUSB(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
    /* Initialize the USB interface */
    if(USB_Class_CDC_Init(FMSTR_USB_CONTROLLER_ID, &cdc_config, &pcm_usbHandle) != USB_OK)
        return FMSTR_FALSE;
#endif

    return FMSTR_TRUE;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <FMSTR_ProcessUSB>:
* This function perform USB CDC periodic task. In Short Interrupt mode also decode
* received FreeMASTER packet and initialize transmit
*
******************************************************************************/
static void FMSTR_ProcessUSB(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
    /* call the periodic task function */
    //USB_CDC_Periodic_Task();

#if FMSTR_SHORT_INTR
    /*check whether enumeration is complete or not */
    if((pcm_wFlags.flg.bUsbCdcStartApp) && (pcm_wFlags.flg.bUsbCdcStartTrans))
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <FMSTR_ProcessUSB+0x50>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01c      	beq.n	80053d4 <FMSTR_ProcessUSB+0x4c>
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <FMSTR_ProcessUSB+0x50>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d015      	beq.n	80053d4 <FMSTR_ProcessUSB+0x4c>
    {
        /*transmitter not active, able to receive */
        if ((!pcm_wFlags.flg.bTxActive) && (pcm_wFlags.flg.bUsbReadyToDecode))
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <FMSTR_ProcessUSB+0x50>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10e      	bne.n	80053d4 <FMSTR_ProcessUSB+0x4c>
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <FMSTR_ProcessUSB+0x50>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <FMSTR_ProcessUSB+0x4c>
        {
            FMSTR_ProtocolDecoder(pcm_pCommBuffer);
 80053c4:	4805      	ldr	r0, [pc, #20]	; (80053dc <FMSTR_ProcessUSB+0x54>)
 80053c6:	f7ff fad1 	bl	800496c <FMSTR_ProtocolDecoder>
            pcm_wFlags.flg.bUsbReadyToDecode = 0;
 80053ca:	4a03      	ldr	r2, [pc, #12]	; (80053d8 <FMSTR_ProcessUSB+0x50>)
 80053cc:	7813      	ldrb	r3, [r2, #0]
 80053ce:	f36f 13c7 	bfc	r3, #7, #1
 80053d2:	7013      	strb	r3, [r2, #0]
        }
    }
#endif
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000620 	.word	0x20000620
 80053dc:	200005e0 	.word	0x200005e0

080053e0 <FMSTR_SendUsbPacket>:
* pass down the buffer to USB CDC TX function.
*
******************************************************************************/

static void FMSTR_SendUsbPacket()
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
    /* transmitter active and empty? */
    if (pcm_wFlags.flg.bTxActive)
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <FMSTR_SendUsbPacket+0x54>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <FMSTR_SendUsbPacket+0x4c>
    {
        FMSTR_U8 index;

        /* fill in the transmitter buffer */
        for (index = 0; index < DIC_BULK_IN_ENDP_PACKET_SIZE; index++){
 80053f4:	2300      	movs	r3, #0
 80053f6:	71fb      	strb	r3, [r7, #7]
 80053f8:	e00d      	b.n	8005416 <FMSTR_SendUsbPacket+0x36>
            FMSTR_U8 TxChar;
            if (FMSTR_Tx(&TxChar))
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f895 	bl	800552c <FMSTR_Tx>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <FMSTR_SendUsbPacket+0x3e>
                break;
            pcm_usbSendBuf[index] = TxChar;
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	79b9      	ldrb	r1, [r7, #6]
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <FMSTR_SendUsbPacket+0x58>)
 800540e:	54d1      	strb	r1, [r2, r3]
        for (index = 0; index < DIC_BULK_IN_ENDP_PACKET_SIZE; index++){
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	3301      	adds	r3, #1
 8005414:	71fb      	strb	r3, [r7, #7]
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b3f      	cmp	r3, #63	; 0x3f
 800541a:	d9ee      	bls.n	80053fa <FMSTR_SendUsbPacket+0x1a>
 800541c:	e000      	b.n	8005420 <FMSTR_SendUsbPacket+0x40>
                break;
 800541e:	bf00      	nop
        }

        CDC_Transmit_FS(pcm_usbSendBuf, index);
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	4804      	ldr	r0, [pc, #16]	; (8005438 <FMSTR_SendUsbPacket+0x58>)
 8005428:	f002 f976 	bl	8007718 <CDC_Transmit_FS>
    }
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000620 	.word	0x20000620
 8005438:	2000062c 	.word	0x2000062c

0800543c <FMSTR_Listen>:
* Reset the receiver machine and start listening on a serial line
*
******************************************************************************/

static void FMSTR_Listen(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
    pcm_nRxTodo = 0U;
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <FMSTR_Listen+0x20>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]

    /* disable transmitter state machine */
    pcm_wFlags.flg.bTxActive = 0U;
 8005446:	4a06      	ldr	r2, [pc, #24]	; (8005460 <FMSTR_Listen+0x24>)
 8005448:	7813      	ldrb	r3, [r2, #0]
 800544a:	f36f 0300 	bfc	r3, #0, #1
 800544e:	7013      	strb	r3, [r2, #0]
    /* we have just finished the transmission of the test frame, now wait the 32x times the sendtime 
       to receive any command from PC (count<0 is measurement, count>0 is waiting, count=0 is send trigger) */
    if(pcm_nDebugTxPollCount < 0)
        pcm_nDebugTxPollCount *= -(FMSTR_DEBUG_TX_POLLCNT_XFACTOR);
#endif
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000625 	.word	0x20000625
 8005460:	20000620 	.word	0x20000620

08005464 <FMSTR_SendResponse>:
* (inlcuding the status byte). It computes the check sum and kicks on tx.
*
******************************************************************************/

void FMSTR_SendResponse(FMSTR_BPTR pResponse, FMSTR_SIZE8 nLength)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
    FMSTR_U16 chSum = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	81fb      	strh	r3, [r7, #14]
    FMSTR_SIZE8 i;
    FMSTR_U8 c;

    /* remember the buffer to be sent */
    pcm_pTxBuff = pResponse;
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <FMSTR_SendResponse+0xbc>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6013      	str	r3, [r2, #0]
    
    /* status byte and data are already there, compute checksum only     */
    for (i=0U; i<nLength; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	737b      	strb	r3, [r7, #13]
 800547e:	e012      	b.n	80054a6 <FMSTR_SendResponse+0x42>
    {
        c = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	733b      	strb	r3, [r7, #12]
        pResponse = FMSTR_ValueFromBuffer8(&c, pResponse);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	733b      	strb	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3301      	adds	r3, #1
 800548e:	607b      	str	r3, [r7, #4]
        /* add character to checksum */
        chSum += c;
 8005490:	7b3b      	ldrb	r3, [r7, #12]
 8005492:	b29a      	uxth	r2, r3
 8005494:	89fb      	ldrh	r3, [r7, #14]
 8005496:	4413      	add	r3, r2
 8005498:	81fb      	strh	r3, [r7, #14]
        /* prevent saturation to happen on DSP platforms */
        chSum &= 0xffU;
 800549a:	89fb      	ldrh	r3, [r7, #14]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	81fb      	strh	r3, [r7, #14]
    for (i=0U; i<nLength; i++)
 80054a0:	7b7b      	ldrb	r3, [r7, #13]
 80054a2:	3301      	adds	r3, #1
 80054a4:	737b      	strb	r3, [r7, #13]
 80054a6:	7b7a      	ldrb	r2, [r7, #13]
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3e8      	bcc.n	8005480 <FMSTR_SendResponse+0x1c>
    }
    
    /* store checksum after the message */
    pResponse = FMSTR_ValueToBuffer8(pResponse, (FMSTR_U8) (((FMSTR_U8)(~chSum)) + 1U));
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	425b      	negs	r3, r3
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3301      	adds	r3, #1
 80054be:	607b      	str	r3, [r7, #4]

    /* send the message and the checksum and the SOB */
    pcm_nTxTodo = (FMSTR_SIZE8) (nLength + 1U); 
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	3301      	adds	r3, #1
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <FMSTR_SendResponse+0xc0>)
 80054c8:	701a      	strb	r2, [r3, #0]
    
    /* now transmitting the response */
    pcm_wFlags.flg.bTxActive = 1U;
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <FMSTR_SendResponse+0xc4>)
 80054cc:	7813      	ldrb	r3, [r2, #0]
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	7013      	strb	r3, [r2, #0]

#if (FMSTR_USE_USB_CDC) || (FMSTR_USE_MQX_IO) || (FMSTR_USE_JTAG)
    pcm_wFlags.flg.bTxFirstSobSend = 1U;
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <FMSTR_SendResponse+0xc4>)
 80054d6:	7813      	ldrb	r3, [r2, #0]
 80054d8:	f043 0310 	orr.w	r3, r3, #16
 80054dc:	7013      	strb	r3, [r2, #0]
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    pcm_wFlags.flg.bTxWaitTC = 0U;
#endif

    /* do not replicate the initial SOB  */
    pcm_wFlags.flg.bTxLastCharSOB = 0U;
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <FMSTR_SendResponse+0xc4>)
 80054e0:	7813      	ldrb	r3, [r2, #0]
 80054e2:	f36f 0341 	bfc	r3, #1, #1
 80054e6:	7013      	strb	r3, [r2, #0]
        FMSTR_JTAG_ETXI();
    }
#endif              

#elif FMSTR_USE_USB_CDC
    if ((pcm_wFlags.flg.bUsbCdcStartApp) && (pcm_wFlags.flg.bTxActive) && (pcm_wFlags.flg.bUsbCdcStartTrans))
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <FMSTR_SendResponse+0xc4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00f      	beq.n	8005516 <FMSTR_SendResponse+0xb2>
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <FMSTR_SendResponse+0xc4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <FMSTR_SendResponse+0xb2>
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <FMSTR_SendResponse+0xc4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <FMSTR_SendResponse+0xb2>
        /* Finalize USB packet to transmit and send packet */
        FMSTR_SendUsbPacket();
 8005512:	f7ff ff65 	bl	80053e0 <FMSTR_SendUsbPacket>
    serial_putc(pSerialObj, (FMSTR_U8) FMSTR_SOB);
        /* enabled TX interrupt */
    serial_irq_set(pSerialObj, TxIrq, 1);
#endif
#endif /* FMSTR_LONG_INTR || FMSTR_SHORT_INTR */    
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000628 	.word	0x20000628
 8005524:	20000624 	.word	0x20000624
 8005528:	20000620 	.word	0x20000620

0800552c <FMSTR_Tx>:
* get ready buffer(prepare data to send)
*
******************************************************************************/

FMSTR_BOOL FMSTR_Tx(FMSTR_U8* pTxChar)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
#if (FMSTR_USE_USB_CDC) || (FMSTR_USE_MQX_IO) || (FMSTR_USE_JTAG)
    /* to send first SOB byte*/
    if (pcm_wFlags.flg.bTxFirstSobSend)
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <FMSTR_Tx+0x98>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <FMSTR_Tx+0x2a>
    {
        *pTxChar = FMSTR_SOB;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	222b      	movs	r2, #43	; 0x2b
 8005546:	701a      	strb	r2, [r3, #0]
        pcm_wFlags.flg.bTxFirstSobSend = 0U;
 8005548:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <FMSTR_Tx+0x98>)
 800554a:	7813      	ldrb	r3, [r2, #0]
 800554c:	f36f 1304 	bfc	r3, #4, #1
 8005550:	7013      	strb	r3, [r2, #0]
        return FMSTR_FALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	e032      	b.n	80055bc <FMSTR_Tx+0x90>
    }
#endif      
    if (pcm_nTxTodo)
 8005556:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <FMSTR_Tx+0x9c>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02b      	beq.n	80055b6 <FMSTR_Tx+0x8a>
    {
        /* fetch & send character ready to transmit */
        /*lint -e{534} ignoring return value */
        (void)FMSTR_ValueFromBuffer8(pTxChar, pcm_pTxBuff);
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <FMSTR_Tx+0xa0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	701a      	strb	r2, [r3, #0]
        
        /* first, handle the replicated SOB characters */
        if (*pTxChar == FMSTR_SOB)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b2b      	cmp	r3, #43	; 0x2b
 800556e:	d115      	bne.n	800559c <FMSTR_Tx+0x70>
        {
            pcm_wFlags.flg.bTxLastCharSOB ^= 1U;
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <FMSTR_Tx+0x98>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2d9      	uxtb	r1, r3
 8005580:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <FMSTR_Tx+0x98>)
 8005582:	7813      	ldrb	r3, [r2, #0]
 8005584:	f361 0341 	bfi	r3, r1, #1, #1
 8005588:	7013      	strb	r3, [r2, #0]
            if ((pcm_wFlags.flg.bTxLastCharSOB))
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <FMSTR_Tx+0x98>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <FMSTR_Tx+0x70>
            {
                /* yes, repeat the SOB next time */
                return FMSTR_FALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	e00f      	b.n	80055bc <FMSTR_Tx+0x90>
            }
        }
        /* no, advance tx buffer pointer */
        pcm_nTxTodo--;
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <FMSTR_Tx+0x9c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <FMSTR_Tx+0x9c>)
 80055a6:	701a      	strb	r2, [r3, #0]
        pcm_pTxBuff = FMSTR_SkipInBuffer(pcm_pTxBuff, 1U);
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <FMSTR_Tx+0xa0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	4a07      	ldr	r2, [pc, #28]	; (80055cc <FMSTR_Tx+0xa0>)
 80055b0:	6013      	str	r3, [r2, #0]
        return FMSTR_FALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e002      	b.n	80055bc <FMSTR_Tx+0x90>
    /* start listening immediately */
    FMSTR_Listen();
  #endif  
#else
    /* start listening immediately */
    FMSTR_Listen();
 80055b6:	f7ff ff41 	bl	800543c <FMSTR_Listen>
#endif

    return FMSTR_TRUE;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000620 	.word	0x20000620
 80055c8:	20000624 	.word	0x20000624
 80055cc:	20000628 	.word	0x20000628

080055d0 <FMSTR_InitSerial>:
* @brief    Serial communication initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_InitSerial(void)
{   
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
    /* initialize all state variables */
    pcm_wFlags.all = 0U;
 80055d4:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <FMSTR_InitSerial+0x28>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
    pcm_nTxTodo = 0U;
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <FMSTR_InitSerial+0x2c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
    if (!FMSTR_InitMQX())
        return FMSTR_FALSE;
#endif

#if FMSTR_USE_USB_CDC
    if (!FMSTR_InitUSB())
 80055e0:	f7ff feca 	bl	8005378 <FMSTR_InitUSB>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <FMSTR_InitSerial+0x1e>
        return FMSTR_FALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e002      	b.n	80055f4 <FMSTR_InitSerial+0x24>
     * as soon as possible during Listen */
    pcm_nDebugTxPollCount = 0;
#endif

    /* start listening for commands */
    FMSTR_Listen();
 80055ee:	f7ff ff25 	bl	800543c <FMSTR_Listen>
    return FMSTR_TRUE;
 80055f2:	2301      	movs	r3, #1
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000620 	.word	0x20000620
 80055fc:	20000624 	.word	0x20000624

08005600 <FMSTR_Poll>:
* and it is tried to be fixed periodically here in FMSTR_Poll.
*
*******************************************************************************/

void FMSTR_Poll(void)
{ 
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
    
#elif FMSTR_SHORT_INTR 

#if FMSTR_USE_USB_CDC
    /*  */
    FMSTR_ProcessUSB();
 8005604:	f7ff fec0 	bl	8005388 <FMSTR_ProcessUSB>
#if FMSTR_DEBUG_TX
    /* down-counting the polls for heuristic time measurement */
    if(pcm_nDebugTxPollCount != 0 && pcm_nDebugTxPollCount > FMSTR_DEBUG_TX_POLLCNT_MIN)
        pcm_nDebugTxPollCount--;
#endif
}
 8005608:	bf00      	nop
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005618:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800561c:	f002 fc94 	bl	8007f48 <USBD_static_malloc>
 8005620:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	32b0      	adds	r2, #176	; 0xb0
 8005632:	2100      	movs	r1, #0
 8005634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005638:	2302      	movs	r3, #2
 800563a:	e0d4      	b.n	80057e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800563c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005640:	2100      	movs	r1, #0
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f002 fce8 	bl	8008018 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	32b0      	adds	r2, #176	; 0xb0
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	32b0      	adds	r2, #176	; 0xb0
 8005662:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7c1b      	ldrb	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d138      	bne.n	80056e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005674:	4b5e      	ldr	r3, [pc, #376]	; (80057f0 <USBD_CDC_Init+0x1e4>)
 8005676:	7819      	ldrb	r1, [r3, #0]
 8005678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567c:	2202      	movs	r2, #2
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f002 fb3f 	bl	8007d02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005684:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <USBD_CDC_Init+0x1e4>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	2201      	movs	r2, #1
 800569c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800569e:	4b55      	ldr	r3, [pc, #340]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 80056a0:	7819      	ldrb	r1, [r3, #0]
 80056a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a6:	2202      	movs	r2, #2
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f002 fb2a 	bl	8007d02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056ae:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056c6:	2201      	movs	r2, #1
 80056c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056ca:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <USBD_CDC_Init+0x1ec>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3326      	adds	r3, #38	; 0x26
 80056e0:	2210      	movs	r2, #16
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	e035      	b.n	8005752 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <USBD_CDC_Init+0x1e4>)
 80056e8:	7819      	ldrb	r1, [r3, #0]
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	2202      	movs	r2, #2
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f002 fb07 	bl	8007d02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056f4:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <USBD_CDC_Init+0x1e4>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	3324      	adds	r3, #36	; 0x24
 800570a:	2201      	movs	r2, #1
 800570c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800570e:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 8005710:	7819      	ldrb	r1, [r3, #0]
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	2202      	movs	r2, #2
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f002 faf3 	bl	8007d02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005734:	2201      	movs	r2, #1
 8005736:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005738:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <USBD_CDC_Init+0x1ec>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	3326      	adds	r3, #38	; 0x26
 800574e:	2210      	movs	r2, #16
 8005750:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005752:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <USBD_CDC_Init+0x1ec>)
 8005754:	7819      	ldrb	r1, [r3, #0]
 8005756:	2308      	movs	r3, #8
 8005758:	2203      	movs	r2, #3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 fad1 	bl	8007d02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005760:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <USBD_CDC_Init+0x1ec>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3324      	adds	r3, #36	; 0x24
 8005776:	2201      	movs	r2, #1
 8005778:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	33b0      	adds	r3, #176	; 0xb0
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057b0:	2302      	movs	r3, #2
 80057b2:	e018      	b.n	80057e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7c1b      	ldrb	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 80057be:	7819      	ldrb	r1, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f002 fb88 	bl	8007ee0 <USBD_LL_PrepareReceive>
 80057d0:	e008      	b.n	80057e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <USBD_CDC_Init+0x1e8>)
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f002 fb7e 	bl	8007ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000093 	.word	0x20000093
 80057f4:	20000094 	.word	0x20000094
 80057f8:	20000095 	.word	0x20000095

080057fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005808:	4b3a      	ldr	r3, [pc, #232]	; (80058f4 <USBD_CDC_DeInit+0xf8>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f002 fa9d 	bl	8007d4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005814:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <USBD_CDC_DeInit+0xf8>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3324      	adds	r3, #36	; 0x24
 800582a:	2200      	movs	r2, #0
 800582c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800582e:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <USBD_CDC_DeInit+0xfc>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f002 fa8a 	bl	8007d4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800583a:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <USBD_CDC_DeInit+0xfc>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005852:	2200      	movs	r2, #0
 8005854:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <USBD_CDC_DeInit+0x100>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f002 fa76 	bl	8007d4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005862:	4b26      	ldr	r3, [pc, #152]	; (80058fc <USBD_CDC_DeInit+0x100>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	2200      	movs	r2, #0
 800587a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800587c:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <USBD_CDC_DeInit+0x100>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	3326      	adds	r3, #38	; 0x26
 8005892:	2200      	movs	r2, #0
 8005894:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	32b0      	adds	r2, #176	; 0xb0
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01f      	beq.n	80058e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	33b0      	adds	r3, #176	; 0xb0
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	32b0      	adds	r2, #176	; 0xb0
 80058c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 fb4a 	bl	8007f64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	32b0      	adds	r2, #176	; 0xb0
 80058da:	2100      	movs	r1, #0
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000093 	.word	0x20000093
 80058f8:	20000094 	.word	0x20000094
 80058fc:	20000095 	.word	0x20000095

08005900 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	32b0      	adds	r2, #176	; 0xb0
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	e0bf      	b.n	8005ab0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005938:	2b00      	cmp	r3, #0
 800593a:	d050      	beq.n	80059de <USBD_CDC_Setup+0xde>
 800593c:	2b20      	cmp	r3, #32
 800593e:	f040 80af 	bne.w	8005aa0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	88db      	ldrh	r3, [r3, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d03a      	beq.n	80059c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b25b      	sxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	da1b      	bge.n	800598c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	33b0      	adds	r3, #176	; 0xb0
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800596a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	88d2      	ldrh	r2, [r2, #6]
 8005970:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	88db      	ldrh	r3, [r3, #6]
 8005976:	2b07      	cmp	r3, #7
 8005978:	bf28      	it	cs
 800597a:	2307      	movcs	r3, #7
 800597c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	89fa      	ldrh	r2, [r7, #14]
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 fd89 	bl	800749c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800598a:	e090      	b.n	8005aae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785a      	ldrb	r2, [r3, #1]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	88db      	ldrh	r3, [r3, #6]
 800599a:	2b3f      	cmp	r3, #63	; 0x3f
 800599c:	d803      	bhi.n	80059a6 <USBD_CDC_Setup+0xa6>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	88db      	ldrh	r3, [r3, #6]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	e000      	b.n	80059a8 <USBD_CDC_Setup+0xa8>
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059ae:	6939      	ldr	r1, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059b6:	461a      	mov	r2, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fd9b 	bl	80074f4 <USBD_CtlPrepareRx>
      break;
 80059be:	e076      	b.n	8005aae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	33b0      	adds	r3, #176	; 0xb0
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	7850      	ldrb	r0, [r2, #1]
 80059d6:	2200      	movs	r2, #0
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	4798      	blx	r3
      break;
 80059dc:	e067      	b.n	8005aae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b0b      	cmp	r3, #11
 80059e4:	d851      	bhi.n	8005a8a <USBD_CDC_Setup+0x18a>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <USBD_CDC_Setup+0xec>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a1d 	.word	0x08005a1d
 80059f0:	08005a99 	.word	0x08005a99
 80059f4:	08005a8b 	.word	0x08005a8b
 80059f8:	08005a8b 	.word	0x08005a8b
 80059fc:	08005a8b 	.word	0x08005a8b
 8005a00:	08005a8b 	.word	0x08005a8b
 8005a04:	08005a8b 	.word	0x08005a8b
 8005a08:	08005a8b 	.word	0x08005a8b
 8005a0c:	08005a8b 	.word	0x08005a8b
 8005a10:	08005a8b 	.word	0x08005a8b
 8005a14:	08005a47 	.word	0x08005a47
 8005a18:	08005a71 	.word	0x08005a71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d107      	bne.n	8005a38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a28:	f107 030a 	add.w	r3, r7, #10
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fd33 	bl	800749c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a36:	e032      	b.n	8005a9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fcbd 	bl	80073ba <USBD_CtlError>
            ret = USBD_FAIL;
 8005a40:	2303      	movs	r3, #3
 8005a42:	75fb      	strb	r3, [r7, #23]
          break;
 8005a44:	e02b      	b.n	8005a9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d107      	bne.n	8005a62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a52:	f107 030d 	add.w	r3, r7, #13
 8005a56:	2201      	movs	r2, #1
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fd1e 	bl	800749c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a60:	e01d      	b.n	8005a9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fca8 	bl	80073ba <USBD_CtlError>
            ret = USBD_FAIL;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a6e:	e016      	b.n	8005a9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d00f      	beq.n	8005a9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc9b 	bl	80073ba <USBD_CtlError>
            ret = USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a88:	e008      	b.n	8005a9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fc94 	bl	80073ba <USBD_CtlError>
          ret = USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	75fb      	strb	r3, [r7, #23]
          break;
 8005a96:	e002      	b.n	8005a9e <USBD_CDC_Setup+0x19e>
          break;
 8005a98:	bf00      	nop
 8005a9a:	e008      	b.n	8005aae <USBD_CDC_Setup+0x1ae>
          break;
 8005a9c:	bf00      	nop
      }
      break;
 8005a9e:	e006      	b.n	8005aae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fc89 	bl	80073ba <USBD_CtlError>
      ret = USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005aac:	bf00      	nop
  }

  return (uint8_t)ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005aca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32b0      	adds	r2, #176	; 0xb0
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e065      	b.n	8005bae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	32b0      	adds	r2, #176	; 0xb0
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3318      	adds	r3, #24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02f      	beq.n	8005b6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3318      	adds	r3, #24
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	f003 010f 	and.w	r1, r3, #15
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	440b      	add	r3, r1
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4403      	add	r3, r0
 8005b34:	3348      	adds	r3, #72	; 0x48
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d112      	bne.n	8005b6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	3318      	adds	r3, #24
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b5e:	78f9      	ldrb	r1, [r7, #3]
 8005b60:	2300      	movs	r3, #0
 8005b62:	2200      	movs	r2, #0
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f002 f99a 	bl	8007e9e <USBD_LL_Transmit>
 8005b6a:	e01f      	b.n	8005bac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	33b0      	adds	r3, #176	; 0xb0
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	33b0      	adds	r3, #176	; 0xb0
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	32b0      	adds	r2, #176	; 0xb0
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	32b0      	adds	r2, #176	; 0xb0
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e01a      	b.n	8005c1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f002 f998 	bl	8007f22 <USBD_LL_GetRxDataSize>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	33b0      	adds	r3, #176	; 0xb0
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	32b0      	adds	r2, #176	; 0xb0
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e025      	b.n	8005c94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	33b0      	adds	r3, #176	; 0xb0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01a      	beq.n	8005c92 <USBD_CDC_EP0_RxReady+0x6c>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c62:	2bff      	cmp	r3, #255	; 0xff
 8005c64:	d015      	beq.n	8005c92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	33b0      	adds	r3, #176	; 0xb0
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005c7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c86:	b292      	uxth	r2, r2
 8005c88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22ff      	movs	r2, #255	; 0xff
 8005c8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ca4:	2182      	movs	r1, #130	; 0x82
 8005ca6:	4818      	ldr	r0, [pc, #96]	; (8005d08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ca8:	f000 fd4f 	bl	800674a <USBD_GetEpDesc>
 8005cac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4815      	ldr	r0, [pc, #84]	; (8005d08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cb2:	f000 fd4a 	bl	800674a <USBD_GetEpDesc>
 8005cb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cb8:	2181      	movs	r1, #129	; 0x81
 8005cba:	4813      	ldr	r0, [pc, #76]	; (8005d08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cbc:	f000 fd45 	bl	800674a <USBD_GetEpDesc>
 8005cc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cdc:	711a      	strb	r2, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d006      	beq.n	8005cf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf0:	711a      	strb	r2, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2243      	movs	r2, #67	; 0x43
 8005cfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cfc:	4b02      	ldr	r3, [pc, #8]	; (8005d08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000050 	.word	0x20000050

08005d0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d14:	2182      	movs	r1, #130	; 0x82
 8005d16:	4818      	ldr	r0, [pc, #96]	; (8005d78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d18:	f000 fd17 	bl	800674a <USBD_GetEpDesc>
 8005d1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4815      	ldr	r0, [pc, #84]	; (8005d78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d22:	f000 fd12 	bl	800674a <USBD_GetEpDesc>
 8005d26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d28:	2181      	movs	r1, #129	; 0x81
 8005d2a:	4813      	ldr	r0, [pc, #76]	; (8005d78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d2c:	f000 fd0d 	bl	800674a <USBD_GetEpDesc>
 8005d30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2200      	movs	r2, #0
 8005d48:	711a      	strb	r2, [r3, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f042 0202 	orr.w	r2, r2, #2
 8005d50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	711a      	strb	r2, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f042 0202 	orr.w	r2, r2, #2
 8005d64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2243      	movs	r2, #67	; 0x43
 8005d6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d6c:	4b02      	ldr	r3, [pc, #8]	; (8005d78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000050 	.word	0x20000050

08005d7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d84:	2182      	movs	r1, #130	; 0x82
 8005d86:	4818      	ldr	r0, [pc, #96]	; (8005de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d88:	f000 fcdf 	bl	800674a <USBD_GetEpDesc>
 8005d8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4815      	ldr	r0, [pc, #84]	; (8005de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d92:	f000 fcda 	bl	800674a <USBD_GetEpDesc>
 8005d96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d98:	2181      	movs	r1, #129	; 0x81
 8005d9a:	4813      	ldr	r0, [pc, #76]	; (8005de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d9c:	f000 fcd5 	bl	800674a <USBD_GetEpDesc>
 8005da0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2210      	movs	r2, #16
 8005dac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d006      	beq.n	8005dc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dbc:	711a      	strb	r2, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd0:	711a      	strb	r2, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2243      	movs	r2, #67	; 0x43
 8005dda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000050 	.word	0x20000050

08005dec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	220a      	movs	r2, #10
 8005df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dfa:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	2000000c 	.word	0x2000000c

08005e0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e009      	b.n	8005e34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	33b0      	adds	r3, #176	; 0xb0
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	32b0      	adds	r2, #176	; 0xb0
 8005e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e008      	b.n	8005e78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	32b0      	adds	r2, #176	; 0xb0
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e004      	b.n	8005eb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32b0      	adds	r2, #176	; 0xb0
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32b0      	adds	r2, #176	; 0xb0
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e025      	b.n	8005f3e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11f      	bne.n	8005f3c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <USBD_CDC_TransmitPacket+0x88>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f003 020f 	and.w	r2, r3, #15
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4403      	add	r3, r0
 8005f1e:	3318      	adds	r3, #24
 8005f20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <USBD_CDC_TransmitPacket+0x88>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 ffb3 	bl	8007e9e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000093 	.word	0x20000093

08005f4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	32b0      	adds	r2, #176	; 0xb0
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	32b0      	adds	r2, #176	; 0xb0
 8005f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e018      	b.n	8005fac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7c1b      	ldrb	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <USBD_CDC_ReceivePacket+0x68>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 ffa5 	bl	8007ee0 <USBD_LL_PrepareReceive>
 8005f96:	e008      	b.n	8005faa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <USBD_CDC_ReceivePacket+0x68>)
 8005f9a:	7819      	ldrb	r1, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 ff9b 	bl	8007ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000094 	.word	0x20000094

08005fb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e01f      	b.n	8006010 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 fe15 	bl	8007c34 <USBD_LL_Init>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	e025      	b.n	800607c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32ae      	adds	r2, #174	; 0xae
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00f      	beq.n	800606c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	32ae      	adds	r2, #174	; 0xae
 8006056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f107 020e 	add.w	r2, r7, #14
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	4602      	mov	r2, r0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fe1d 	bl	8007ccc <USBD_LL_Start>
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	4611      	mov	r1, r2
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	4611      	mov	r1, r2
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f908 	bl	8007346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2b02      	cmp	r3, #2
 8006158:	d01a      	beq.n	8006190 <USBD_LL_SetupStage+0x72>
 800615a:	2b02      	cmp	r3, #2
 800615c:	d822      	bhi.n	80061a4 <USBD_LL_SetupStage+0x86>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <USBD_LL_SetupStage+0x4a>
 8006162:	2b01      	cmp	r3, #1
 8006164:	d00a      	beq.n	800617c <USBD_LL_SetupStage+0x5e>
 8006166:	e01d      	b.n	80061a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fb5f 	bl	8006834 <USBD_StdDevReq>
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
      break;
 800617a:	e020      	b.n	80061be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fbc7 	bl	8006918 <USBD_StdItfReq>
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]
      break;
 800618e:	e016      	b.n	80061be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fc29 	bl	80069f0 <USBD_StdEPReq>
 800619e:	4603      	mov	r3, r0
 80061a0:	73fb      	strb	r3, [r7, #15]
      break;
 80061a2:	e00c      	b.n	80061be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fdea 	bl	8007d8c <USBD_LL_StallEP>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
      break;
 80061bc:	bf00      	nop
  }

  return ret;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	460b      	mov	r3, r1
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d16e      	bne.n	80062be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	f040 8098 	bne.w	8006324 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d913      	bls.n	8006228 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	4293      	cmp	r3, r2
 8006218:	bf28      	it	cs
 800621a:	4613      	movcs	r3, r2
 800621c:	461a      	mov	r2, r3
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f001 f984 	bl	800752e <USBD_CtlContinueRx>
 8006226:	e07d      	b.n	8006324 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2b02      	cmp	r3, #2
 8006234:	d014      	beq.n	8006260 <USBD_LL_DataOutStage+0x98>
 8006236:	2b02      	cmp	r3, #2
 8006238:	d81d      	bhi.n	8006276 <USBD_LL_DataOutStage+0xae>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <USBD_LL_DataOutStage+0x7c>
 800623e:	2b01      	cmp	r3, #1
 8006240:	d003      	beq.n	800624a <USBD_LL_DataOutStage+0x82>
 8006242:	e018      	b.n	8006276 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	75bb      	strb	r3, [r7, #22]
            break;
 8006248:	e018      	b.n	800627c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa5e 	bl	8006716 <USBD_CoreFindIF>
 800625a:	4603      	mov	r3, r0
 800625c:	75bb      	strb	r3, [r7, #22]
            break;
 800625e:	e00d      	b.n	800627c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fa60 	bl	8006730 <USBD_CoreFindEP>
 8006270:	4603      	mov	r3, r0
 8006272:	75bb      	strb	r3, [r7, #22]
            break;
 8006274:	e002      	b.n	800627c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	75bb      	strb	r3, [r7, #22]
            break;
 800627a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800627c:	7dbb      	ldrb	r3, [r7, #22]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d119      	bne.n	80062b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d113      	bne.n	80062b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800628e:	7dba      	ldrb	r2, [r7, #22]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32ae      	adds	r2, #174	; 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800629e:	7dba      	ldrb	r2, [r7, #22]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062a6:	7dba      	ldrb	r2, [r7, #22]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	32ae      	adds	r2, #174	; 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f001 f94a 	bl	8007550 <USBD_CtlSendStatus>
 80062bc:	e032      	b.n	8006324 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062be:	7afb      	ldrb	r3, [r7, #11]
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fa31 	bl	8006730 <USBD_CoreFindEP>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062d2:	7dbb      	ldrb	r3, [r7, #22]
 80062d4:	2bff      	cmp	r3, #255	; 0xff
 80062d6:	d025      	beq.n	8006324 <USBD_LL_DataOutStage+0x15c>
 80062d8:	7dbb      	ldrb	r3, [r7, #22]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d122      	bne.n	8006324 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d117      	bne.n	800631a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062ea:	7dba      	ldrb	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	32ae      	adds	r2, #174	; 0xae
 80062f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00f      	beq.n	800631a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80062fa:	7dba      	ldrb	r2, [r7, #22]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006302:	7dba      	ldrb	r2, [r7, #22]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	32ae      	adds	r2, #174	; 0xae
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	7afa      	ldrb	r2, [r7, #11]
 8006310:	4611      	mov	r1, r2
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	e000      	b.n	8006326 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	460b      	mov	r3, r1
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800633c:	7afb      	ldrb	r3, [r7, #11]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d16f      	bne.n	8006422 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3314      	adds	r3, #20
 8006346:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800634e:	2b02      	cmp	r3, #2
 8006350:	d15a      	bne.n	8006408 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	429a      	cmp	r2, r3
 800635c:	d914      	bls.n	8006388 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f001 f8ac 	bl	80074d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800637a:	2300      	movs	r3, #0
 800637c:	2200      	movs	r2, #0
 800637e:	2100      	movs	r1, #0
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 fdad 	bl	8007ee0 <USBD_LL_PrepareReceive>
 8006386:	e03f      	b.n	8006408 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d11c      	bne.n	80063ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d316      	bcc.n	80063ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20f      	bcs.n	80063ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f001 f88d 	bl	80074d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f001 fd8a 	bl	8007ee0 <USBD_LL_PrepareReceive>
 80063cc:	e01c      	b.n	8006408 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d10f      	bne.n	80063fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fcc5 	bl	8007d8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f001 f8b7 	bl	8007576 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d03a      	beq.n	8006488 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fe42 	bl	800609c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006420:	e032      	b.n	8006488 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f97f 	bl	8006730 <USBD_CoreFindEP>
 8006432:	4603      	mov	r3, r0
 8006434:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2bff      	cmp	r3, #255	; 0xff
 800643a:	d025      	beq.n	8006488 <USBD_LL_DataInStage+0x15a>
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d122      	bne.n	8006488 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d11c      	bne.n	8006488 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800644e:	7dfa      	ldrb	r2, [r7, #23]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	32ae      	adds	r2, #174	; 0xae
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d014      	beq.n	8006488 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800645e:	7dfa      	ldrb	r2, [r7, #23]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006466:	7dfa      	ldrb	r2, [r7, #23]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	32ae      	adds	r2, #174	; 0xae
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	7afa      	ldrb	r2, [r7, #11]
 8006474:	4611      	mov	r1, r2
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	4798      	blx	r3
 800647a:	4603      	mov	r3, r0
 800647c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800647e:	7dbb      	ldrb	r3, [r7, #22]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006484:	7dbb      	ldrb	r3, [r7, #22]
 8006486:	e000      	b.n	800648a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d014      	beq.n	80064f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00e      	beq.n	80064f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	4611      	mov	r1, r2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80064f4:	2303      	movs	r3, #3
 80064f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	2200      	movs	r2, #0
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fbff 	bl	8007d02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	2200      	movs	r2, #0
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fbf1 	bl	8007d02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2240      	movs	r2, #64	; 0x40
 800652a:	621a      	str	r2, [r3, #32]

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2da      	uxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b04      	cmp	r3, #4
 8006594:	d106      	bne.n	80065a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800659c:	b2da      	uxtb	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d110      	bne.n	80065e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32ae      	adds	r2, #174	; 0xae
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e01c      	b.n	800664e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d115      	bne.n	800664c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32ae      	adds	r2, #174	; 0xae
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	; 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	4611      	mov	r1, r2
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	32ae      	adds	r2, #174	; 0xae
 800666c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	e01c      	b.n	80066b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b03      	cmp	r3, #3
 8006682:	d115      	bne.n	80066b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32ae      	adds	r2, #174	; 0xae
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32ae      	adds	r2, #174	; 0xae
 80066a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	4611      	mov	r1, r2
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6852      	ldr	r2, [r2, #4]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	4611      	mov	r1, r2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006708:	2303      	movs	r3, #3
 800670a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006722:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800673c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	885b      	ldrh	r3, [r3, #2]
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	429a      	cmp	r2, r3
 8006770:	d920      	bls.n	80067b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800677a:	e013      	b.n	80067a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800677c:	f107 030a 	add.w	r3, r7, #10
 8006780:	4619      	mov	r1, r3
 8006782:	6978      	ldr	r0, [r7, #20]
 8006784:	f000 f81b 	bl	80067be <USBD_GetNextDesc>
 8006788:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b05      	cmp	r3, #5
 8006790:	d108      	bne.n	80067a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	789b      	ldrb	r3, [r3, #2]
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	429a      	cmp	r2, r3
 800679e:	d008      	beq.n	80067b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	885b      	ldrh	r3, [r3, #2]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	897b      	ldrh	r3, [r7, #10]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d8e5      	bhi.n	800677c <USBD_GetEpDesc+0x32>
 80067b0:	e000      	b.n	80067b4 <USBD_GetEpDesc+0x6a>
          break;
 80067b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067b4:	693b      	ldr	r3, [r7, #16]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	881a      	ldrh	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067ea:	68fb      	ldr	r3, [r7, #12]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	3301      	adds	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006816:	8a3b      	ldrh	r3, [r7, #16]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	b21a      	sxth	r2, r3
 800681c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006820:	4313      	orrs	r3, r2
 8006822:	b21b      	sxth	r3, r3
 8006824:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006826:	89fb      	ldrh	r3, [r7, #14]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d005      	beq.n	800685a <USBD_StdDevReq+0x26>
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d857      	bhi.n	8006902 <USBD_StdDevReq+0xce>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <USBD_StdDevReq+0x42>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d153      	bne.n	8006902 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	32ae      	adds	r2, #174	; 0xae
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
      break;
 8006874:	e04a      	b.n	800690c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b09      	cmp	r3, #9
 800687c:	d83b      	bhi.n	80068f6 <USBD_StdDevReq+0xc2>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_StdDevReq+0x50>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068ed 	.word	0x080068ed
 800688c:	080068f7 	.word	0x080068f7
 8006890:	080068e3 	.word	0x080068e3
 8006894:	080068f7 	.word	0x080068f7
 8006898:	080068b7 	.word	0x080068b7
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068f7 	.word	0x080068f7
 80068a4:	080068cf 	.word	0x080068cf
 80068a8:	080068c1 	.word	0x080068c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa3c 	bl	8006d2c <USBD_GetDescriptor>
          break;
 80068b4:	e024      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fba1 	bl	8007000 <USBD_SetAddress>
          break;
 80068be:	e01f      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fbe0 	bl	8007088 <USBD_SetConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
          break;
 80068cc:	e018      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fc83 	bl	80071dc <USBD_GetConfig>
          break;
 80068d6:	e013      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fcb4 	bl	8007248 <USBD_GetStatus>
          break;
 80068e0:	e00e      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fce3 	bl	80072b0 <USBD_SetFeature>
          break;
 80068ea:	e009      	b.n	8006900 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fd07 	bl	8007302 <USBD_ClrFeature>
          break;
 80068f4:	e004      	b.n	8006900 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fd5e 	bl	80073ba <USBD_CtlError>
          break;
 80068fe:	bf00      	nop
      }
      break;
 8006900:	e004      	b.n	800690c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fd58 	bl	80073ba <USBD_CtlError>
      break;
 800690a:	bf00      	nop
  }

  return ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop

08006918 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d005      	beq.n	800693e <USBD_StdItfReq+0x26>
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d852      	bhi.n	80069dc <USBD_StdItfReq+0xc4>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <USBD_StdItfReq+0x26>
 800693a:	2b20      	cmp	r3, #32
 800693c:	d14e      	bne.n	80069dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006944:	b2db      	uxtb	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	2b02      	cmp	r3, #2
 800694a:	d840      	bhi.n	80069ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	889b      	ldrh	r3, [r3, #4]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	d836      	bhi.n	80069c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	889b      	ldrh	r3, [r3, #4]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fed9 	bl	8006716 <USBD_CoreFindIF>
 8006964:	4603      	mov	r3, r0
 8006966:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d01d      	beq.n	80069aa <USBD_StdItfReq+0x92>
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11a      	bne.n	80069aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006974:	7bba      	ldrb	r2, [r7, #14]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32ae      	adds	r2, #174	; 0xae
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006984:	7bba      	ldrb	r2, [r7, #14]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800698c:	7bba      	ldrb	r2, [r7, #14]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	32ae      	adds	r2, #174	; 0xae
 8006992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069a2:	e004      	b.n	80069ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069a8:	e001      	b.n	80069ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d110      	bne.n	80069d8 <USBD_StdItfReq+0xc0>
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fdc7 	bl	8007550 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069c2:	e009      	b.n	80069d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fcf7 	bl	80073ba <USBD_CtlError>
          break;
 80069cc:	e004      	b.n	80069d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fcf2 	bl	80073ba <USBD_CtlError>
          break;
 80069d6:	e000      	b.n	80069da <USBD_StdItfReq+0xc2>
          break;
 80069d8:	bf00      	nop
      }
      break;
 80069da:	e004      	b.n	80069e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fceb 	bl	80073ba <USBD_CtlError>
      break;
 80069e4:	bf00      	nop
  }

  return ret;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	889b      	ldrh	r3, [r3, #4]
 8006a02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d007      	beq.n	8006a20 <USBD_StdEPReq+0x30>
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	f200 817f 	bhi.w	8006d14 <USBD_StdEPReq+0x324>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d02a      	beq.n	8006a70 <USBD_StdEPReq+0x80>
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	f040 817a 	bne.w	8006d14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fe83 	bl	8006730 <USBD_CoreFindEP>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a2e:	7b7b      	ldrb	r3, [r7, #13]
 8006a30:	2bff      	cmp	r3, #255	; 0xff
 8006a32:	f000 8174 	beq.w	8006d1e <USBD_StdEPReq+0x32e>
 8006a36:	7b7b      	ldrb	r3, [r7, #13]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f040 8170 	bne.w	8006d1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a3e:	7b7a      	ldrb	r2, [r7, #13]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a46:	7b7a      	ldrb	r2, [r7, #13]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	32ae      	adds	r2, #174	; 0xae
 8006a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8163 	beq.w	8006d1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a58:	7b7a      	ldrb	r2, [r7, #13]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32ae      	adds	r2, #174	; 0xae
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a6e:	e156      	b.n	8006d1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d008      	beq.n	8006a8a <USBD_StdEPReq+0x9a>
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	f300 8145 	bgt.w	8006d08 <USBD_StdEPReq+0x318>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 809b 	beq.w	8006bba <USBD_StdEPReq+0x1ca>
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d03c      	beq.n	8006b02 <USBD_StdEPReq+0x112>
 8006a88:	e13e      	b.n	8006d08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d002      	beq.n	8006a9c <USBD_StdEPReq+0xac>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d016      	beq.n	8006ac8 <USBD_StdEPReq+0xd8>
 8006a9a:	e02c      	b.n	8006af6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <USBD_StdEPReq+0xce>
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d00a      	beq.n	8006abe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f96d 	bl	8007d8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f969 	bl	8007d8c <USBD_LL_StallEP>
 8006aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006abc:	e020      	b.n	8006b00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fc7a 	bl	80073ba <USBD_CtlError>
              break;
 8006ac6:	e01b      	b.n	8006b00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	885b      	ldrh	r3, [r3, #2]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10e      	bne.n	8006aee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <USBD_StdEPReq+0xfe>
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d008      	beq.n	8006aee <USBD_StdEPReq+0xfe>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f94f 	bl	8007d8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd2e 	bl	8007550 <USBD_CtlSendStatus>

              break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc5e 	bl	80073ba <USBD_CtlError>
              break;
 8006afe:	bf00      	nop
          }
          break;
 8006b00:	e107      	b.n	8006d12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d002      	beq.n	8006b14 <USBD_StdEPReq+0x124>
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d016      	beq.n	8006b40 <USBD_StdEPReq+0x150>
 8006b12:	e04b      	b.n	8006bac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <USBD_StdEPReq+0x146>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b80      	cmp	r3, #128	; 0x80
 8006b1e:	d00a      	beq.n	8006b36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f931 	bl	8007d8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f92d 	bl	8007d8c <USBD_LL_StallEP>
 8006b32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b34:	e040      	b.n	8006bb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fc3e 	bl	80073ba <USBD_CtlError>
              break;
 8006b3e:	e03b      	b.n	8006bb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d136      	bne.n	8006bb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f937 	bl	8007dca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcf7 	bl	8007550 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fde2 	bl	8006730 <USBD_CoreFindEP>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b70:	7b7b      	ldrb	r3, [r7, #13]
 8006b72:	2bff      	cmp	r3, #255	; 0xff
 8006b74:	d01f      	beq.n	8006bb6 <USBD_StdEPReq+0x1c6>
 8006b76:	7b7b      	ldrb	r3, [r7, #13]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11c      	bne.n	8006bb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b7c:	7b7a      	ldrb	r2, [r7, #13]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b84:	7b7a      	ldrb	r2, [r7, #13]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	32ae      	adds	r2, #174	; 0xae
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d010      	beq.n	8006bb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b94:	7b7a      	ldrb	r2, [r7, #13]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	32ae      	adds	r2, #174	; 0xae
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006baa:	e004      	b.n	8006bb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fc03 	bl	80073ba <USBD_CtlError>
              break;
 8006bb4:	e000      	b.n	8006bb8 <USBD_StdEPReq+0x1c8>
              break;
 8006bb6:	bf00      	nop
          }
          break;
 8006bb8:	e0ab      	b.n	8006d12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d002      	beq.n	8006bcc <USBD_StdEPReq+0x1dc>
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d032      	beq.n	8006c30 <USBD_StdEPReq+0x240>
 8006bca:	e097      	b.n	8006cfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <USBD_StdEPReq+0x1f2>
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	2b80      	cmp	r3, #128	; 0x80
 8006bd6:	d004      	beq.n	8006be2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fbed 	bl	80073ba <USBD_CtlError>
                break;
 8006be0:	e091      	b.n	8006d06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da0b      	bge.n	8006c02 <USBD_StdEPReq+0x212>
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	3310      	adds	r3, #16
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3304      	adds	r3, #4
 8006c00:	e00b      	b.n	8006c1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fc37 	bl	800749c <USBD_CtlSendData>
              break;
 8006c2e:	e06a      	b.n	8006d06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da11      	bge.n	8006c5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	f003 020f 	and.w	r2, r3, #15
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d117      	bne.n	8006c82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fbb0 	bl	80073ba <USBD_CtlError>
                  break;
 8006c5a:	e054      	b.n	8006d06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	f003 020f 	and.w	r2, r3, #15
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fb9d 	bl	80073ba <USBD_CtlError>
                  break;
 8006c80:	e041      	b.n	8006d06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da0b      	bge.n	8006ca2 <USBD_StdEPReq+0x2b2>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	3310      	adds	r3, #16
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	e00b      	b.n	8006cba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <USBD_StdEPReq+0x2d8>
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d103      	bne.n	8006cd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e00e      	b.n	8006cee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f897 	bl	8007e08 <USBD_LL_IsStallEP>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fbd1 	bl	800749c <USBD_CtlSendData>
              break;
 8006cfa:	e004      	b.n	8006d06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fb5b 	bl	80073ba <USBD_CtlError>
              break;
 8006d04:	bf00      	nop
          }
          break;
 8006d06:	e004      	b.n	8006d12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb55 	bl	80073ba <USBD_CtlError>
          break;
 8006d10:	bf00      	nop
      }
      break;
 8006d12:	e005      	b.n	8006d20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb4f 	bl	80073ba <USBD_CtlError>
      break;
 8006d1c:	e000      	b.n	8006d20 <USBD_StdEPReq+0x330>
      break;
 8006d1e:	bf00      	nop
  }

  return ret;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	2b06      	cmp	r3, #6
 8006d4e:	f200 8128 	bhi.w	8006fa2 <USBD_GetDescriptor+0x276>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <USBD_GetDescriptor+0x2c>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	08006d8d 	.word	0x08006d8d
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006fa3 	.word	0x08006fa3
 8006d68:	08006fa3 	.word	0x08006fa3
 8006d6c:	08006f43 	.word	0x08006f43
 8006d70:	08006f6f 	.word	0x08006f6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
      break;
 8006d8a:	e112      	b.n	8006fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7c1b      	ldrb	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f107 0208 	add.w	r2, r7, #8
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
 8006da4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	2202      	movs	r2, #2
 8006dac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dae:	e100      	b.n	8006fb2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f107 0208 	add.w	r2, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	701a      	strb	r2, [r3, #0]
      break;
 8006dca:	e0f2      	b.n	8006fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	885b      	ldrh	r3, [r3, #2]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	f200 80ac 	bhi.w	8006f30 <USBD_GetDescriptor+0x204>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_GetDescriptor+0xb4>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006df9 	.word	0x08006df9
 8006de4:	08006e2d 	.word	0x08006e2d
 8006de8:	08006e61 	.word	0x08006e61
 8006dec:	08006e95 	.word	0x08006e95
 8006df0:	08006ec9 	.word	0x08006ec9
 8006df4:	08006efd 	.word	0x08006efd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7c12      	ldrb	r2, [r2, #16]
 8006e10:	f107 0108 	add.w	r1, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1a:	e091      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 facb 	bl	80073ba <USBD_CtlError>
            err++;
 8006e24:	7afb      	ldrb	r3, [r7, #11]
 8006e26:	3301      	adds	r3, #1
 8006e28:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2a:	e089      	b.n	8006f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4e:	e077      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fab1 	bl	80073ba <USBD_CtlError>
            err++;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5e:	e06f      	b.n	8006f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e82:	e05d      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa97 	bl	80073ba <USBD_CtlError>
            err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
          break;
 8006e92:	e055      	b.n	8006f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	f107 0108 	add.w	r1, r7, #8
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb6:	e043      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa7d 	bl	80073ba <USBD_CtlError>
            err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec6:	e03b      	b.n	8006f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e029      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa63 	bl	80073ba <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e021      	b.n	8006f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1e:	e00f      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa49 	bl	80073ba <USBD_CtlError>
            err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2e:	e007      	b.n	8006f40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa41 	bl	80073ba <USBD_CtlError>
          err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f3e:	bf00      	nop
      }
      break;
 8006f40:	e037      	b.n	8006fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7c1b      	ldrb	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	4610      	mov	r0, r2
 8006f58:	4798      	blx	r3
 8006f5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f5c:	e029      	b.n	8006fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fa2a 	bl	80073ba <USBD_CtlError>
        err++;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f6c:	e021      	b.n	8006fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	7c1b      	ldrb	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f107 0208 	add.w	r2, r7, #8
 8006f82:	4610      	mov	r0, r2
 8006f84:	4798      	blx	r3
 8006f86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f90:	e00f      	b.n	8006fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa10 	bl	80073ba <USBD_CtlError>
        err++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa0:	e007      	b.n	8006fb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa08 	bl	80073ba <USBD_CtlError>
      err++;
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	3301      	adds	r3, #1
 8006fae:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb0:	bf00      	nop
  }

  if (err != 0U)
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11e      	bne.n	8006ff6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	88db      	ldrh	r3, [r3, #6]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d016      	beq.n	8006fee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fc0:	893b      	ldrh	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00e      	beq.n	8006fe4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88da      	ldrh	r2, [r3, #6]
 8006fca:	893b      	ldrh	r3, [r7, #8]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bf28      	it	cs
 8006fd0:	4613      	movcs	r3, r2
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa5d 	bl	800749c <USBD_CtlSendData>
 8006fe2:	e009      	b.n	8006ff8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9e7 	bl	80073ba <USBD_CtlError>
 8006fec:	e004      	b.n	8006ff8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 faae 	bl	8007550 <USBD_CtlSendStatus>
 8006ff4:	e000      	b.n	8006ff8 <USBD_GetDescriptor+0x2cc>
    return;
 8006ff6:	bf00      	nop
  }
}
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d131      	bne.n	8007076 <USBD_SetAddress+0x76>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d12d      	bne.n	8007076 <USBD_SetAddress+0x76>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	2b7f      	cmp	r3, #127	; 0x7f
 8007020:	d829      	bhi.n	8007076 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b03      	cmp	r3, #3
 8007038:	d104      	bne.n	8007044 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f9bc 	bl	80073ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	e01d      	b.n	8007080 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7bfa      	ldrb	r2, [r7, #15]
 8007048:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 ff05 	bl	8007e60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa7a 	bl	8007550 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	e009      	b.n	8007080 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007074:	e004      	b.n	8007080 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f99e 	bl	80073ba <USBD_CtlError>
  }
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	885b      	ldrh	r3, [r3, #2]
 800709a:	b2da      	uxtb	r2, r3
 800709c:	4b4e      	ldr	r3, [pc, #312]	; (80071d8 <USBD_SetConfig+0x150>)
 800709e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070a0:	4b4d      	ldr	r3, [pc, #308]	; (80071d8 <USBD_SetConfig+0x150>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d905      	bls.n	80070b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f985 	bl	80073ba <USBD_CtlError>
    return USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e08c      	b.n	80071ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d002      	beq.n	80070c6 <USBD_SetConfig+0x3e>
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d029      	beq.n	8007118 <USBD_SetConfig+0x90>
 80070c4:	e075      	b.n	80071b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070c6:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <USBD_SetConfig+0x150>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d020      	beq.n	8007110 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070ce:	4b42      	ldr	r3, [pc, #264]	; (80071d8 <USBD_SetConfig+0x150>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070d8:	4b3f      	ldr	r3, [pc, #252]	; (80071d8 <USBD_SetConfig+0x150>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fe ffe7 	bl	80060b2 <USBD_SetClassConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f962 	bl	80073ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070fe:	e065      	b.n	80071cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa25 	bl	8007550 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2203      	movs	r2, #3
 800710a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800710e:	e05d      	b.n	80071cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa1d 	bl	8007550 <USBD_CtlSendStatus>
      break;
 8007116:	e059      	b.n	80071cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007118:	4b2f      	ldr	r3, [pc, #188]	; (80071d8 <USBD_SetConfig+0x150>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d112      	bne.n	8007146 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <USBD_SetConfig+0x150>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007132:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <USBD_SetConfig+0x150>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fe ffd6 	bl	80060ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa06 	bl	8007550 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007144:	e042      	b.n	80071cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <USBD_SetConfig+0x150>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d02a      	beq.n	80071aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7fe ffc4 	bl	80060ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007162:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <USBD_SetConfig+0x150>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <USBD_SetConfig+0x150>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fe ff9d 	bl	80060b2 <USBD_SetClassConfig>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00f      	beq.n	80071a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f918 	bl	80073ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fe ffa9 	bl	80060ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071a0:	e014      	b.n	80071cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9d4 	bl	8007550 <USBD_CtlSendStatus>
      break;
 80071a8:	e010      	b.n	80071cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9d0 	bl	8007550 <USBD_CtlSendStatus>
      break;
 80071b0:	e00c      	b.n	80071cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f900 	bl	80073ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ba:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <USBD_SetConfig+0x150>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fe ff92 	bl	80060ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ca:	bf00      	nop
  }

  return ret;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	2000066c 	.word	0x2000066c

080071dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	88db      	ldrh	r3, [r3, #6]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d004      	beq.n	80071f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8e2 	bl	80073ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071f6:	e023      	b.n	8007240 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	dc02      	bgt.n	800720a <USBD_GetConfig+0x2e>
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc03      	bgt.n	8007210 <USBD_GetConfig+0x34>
 8007208:	e015      	b.n	8007236 <USBD_GetConfig+0x5a>
 800720a:	2b03      	cmp	r3, #3
 800720c:	d00b      	beq.n	8007226 <USBD_GetConfig+0x4a>
 800720e:	e012      	b.n	8007236 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3308      	adds	r3, #8
 800721a:	2201      	movs	r2, #1
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f93c 	bl	800749c <USBD_CtlSendData>
        break;
 8007224:	e00c      	b.n	8007240 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	2201      	movs	r2, #1
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f934 	bl	800749c <USBD_CtlSendData>
        break;
 8007234:	e004      	b.n	8007240 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f8be 	bl	80073ba <USBD_CtlError>
        break;
 800723e:	bf00      	nop
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	2b02      	cmp	r3, #2
 800725e:	d81e      	bhi.n	800729e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	88db      	ldrh	r3, [r3, #6]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d004      	beq.n	8007272 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8a5 	bl	80073ba <USBD_CtlError>
        break;
 8007270:	e01a      	b.n	80072a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f043 0202 	orr.w	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	330c      	adds	r3, #12
 8007292:	2202      	movs	r2, #2
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f900 	bl	800749c <USBD_CtlSendData>
      break;
 800729c:	e004      	b.n	80072a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f88a 	bl	80073ba <USBD_CtlError>
      break;
 80072a6:	bf00      	nop
  }
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	885b      	ldrh	r3, [r3, #2]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d107      	bne.n	80072d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f940 	bl	8007550 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072d0:	e013      	b.n	80072fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	885b      	ldrh	r3, [r3, #2]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d10b      	bne.n	80072f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f930 	bl	8007550 <USBD_CtlSendStatus>
}
 80072f0:	e003      	b.n	80072fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f860 	bl	80073ba <USBD_CtlError>
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	2b02      	cmp	r3, #2
 8007318:	d80b      	bhi.n	8007332 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	885b      	ldrh	r3, [r3, #2]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d10c      	bne.n	800733c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f910 	bl	8007550 <USBD_CtlSendStatus>
      }
      break;
 8007330:	e004      	b.n	800733c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f840 	bl	80073ba <USBD_CtlError>
      break;
 800733a:	e000      	b.n	800733e <USBD_ClrFeature+0x3c>
      break;
 800733c:	bf00      	nop
  }
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff fa41 	bl	80067f8 <SWAPBYTE>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff fa34 	bl	80067f8 <SWAPBYTE>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fa27 	bl	80067f8 <SWAPBYTE>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	80da      	strh	r2, [r3, #6]
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c4:	2180      	movs	r1, #128	; 0x80
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fce0 	bl	8007d8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073cc:	2100      	movs	r1, #0
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fcdc 	bl	8007d8c <USBD_LL_StallEP>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d036      	beq.n	8007460 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073f6:	6938      	ldr	r0, [r7, #16]
 80073f8:	f000 f836 	bl	8007468 <USBD_GetLen>
 80073fc:	4603      	mov	r3, r0
 80073fe:	3301      	adds	r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	4413      	add	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	701a      	strb	r2, [r3, #0]
  idx++;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	3301      	adds	r3, #1
 800741a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	2203      	movs	r2, #3
 8007424:	701a      	strb	r2, [r3, #0]
  idx++;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	3301      	adds	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800742c:	e013      	b.n	8007456 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	4413      	add	r3, r2
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	613b      	str	r3, [r7, #16]
    idx++;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	3301      	adds	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4413      	add	r3, r2
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	3301      	adds	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e7      	bne.n	800742e <USBD_GetString+0x52>
 800745e:	e000      	b.n	8007462 <USBD_GetString+0x86>
    return;
 8007460:	bf00      	nop
  }
}
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007478:	e005      	b.n	8007486 <USBD_GetLen+0x1e>
  {
    len++;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	3301      	adds	r3, #1
 800747e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3301      	adds	r3, #1
 8007484:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f5      	bne.n	800747a <USBD_GetLen+0x12>
  }

  return len;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	2100      	movs	r1, #0
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fceb 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	2100      	movs	r1, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fcda 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2203      	movs	r2, #3
 8007504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	2100      	movs	r1, #0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fcde 	bl	8007ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	2100      	movs	r1, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fccd 	bl	8007ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2204      	movs	r2, #4
 800755c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007560:	2300      	movs	r3, #0
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fc99 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2205      	movs	r2, #5
 8007582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007586:	2300      	movs	r3, #0
 8007588:	2200      	movs	r2, #0
 800758a:	2100      	movs	r1, #0
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fca7 	bl	8007ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075a0:	2200      	movs	r2, #0
 80075a2:	4912      	ldr	r1, [pc, #72]	; (80075ec <MX_USB_DEVICE_Init+0x50>)
 80075a4:	4812      	ldr	r0, [pc, #72]	; (80075f0 <MX_USB_DEVICE_Init+0x54>)
 80075a6:	f7fe fd07 	bl	8005fb8 <USBD_Init>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075b0:	f7f9 f858 	bl	8000664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075b4:	490f      	ldr	r1, [pc, #60]	; (80075f4 <MX_USB_DEVICE_Init+0x58>)
 80075b6:	480e      	ldr	r0, [pc, #56]	; (80075f0 <MX_USB_DEVICE_Init+0x54>)
 80075b8:	f7fe fd2e 	bl	8006018 <USBD_RegisterClass>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075c2:	f7f9 f84f 	bl	8000664 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075c6:	490c      	ldr	r1, [pc, #48]	; (80075f8 <MX_USB_DEVICE_Init+0x5c>)
 80075c8:	4809      	ldr	r0, [pc, #36]	; (80075f0 <MX_USB_DEVICE_Init+0x54>)
 80075ca:	f7fe fc1f 	bl	8005e0c <USBD_CDC_RegisterInterface>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075d4:	f7f9 f846 	bl	8000664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075d8:	4805      	ldr	r0, [pc, #20]	; (80075f0 <MX_USB_DEVICE_Init+0x54>)
 80075da:	f7fe fd53 	bl	8006084 <USBD_Start>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075e4:	f7f9 f83e 	bl	8000664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075e8:	bf00      	nop
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	200000ac 	.word	0x200000ac
 80075f0:	20000670 	.word	0x20000670
 80075f4:	20000018 	.word	0x20000018
 80075f8:	20000098 	.word	0x20000098

080075fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007600:	2200      	movs	r2, #0
 8007602:	4905      	ldr	r1, [pc, #20]	; (8007618 <CDC_Init_FS+0x1c>)
 8007604:	4805      	ldr	r0, [pc, #20]	; (800761c <CDC_Init_FS+0x20>)
 8007606:	f7fe fc1b 	bl	8005e40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800760a:	4905      	ldr	r1, [pc, #20]	; (8007620 <CDC_Init_FS+0x24>)
 800760c:	4803      	ldr	r0, [pc, #12]	; (800761c <CDC_Init_FS+0x20>)
 800760e:	f7fe fc39 	bl	8005e84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	2000114c 	.word	0x2000114c
 800761c:	20000670 	.word	0x20000670
 8007620:	2000094c 	.word	0x2000094c

08007624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	71fb      	strb	r3, [r7, #7]
 8007640:	4613      	mov	r3, r2
 8007642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b23      	cmp	r3, #35	; 0x23
 8007648:	d84a      	bhi.n	80076e0 <CDC_Control_FS+0xac>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <CDC_Control_FS+0x1c>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	080076e1 	.word	0x080076e1
 8007654:	080076e1 	.word	0x080076e1
 8007658:	080076e1 	.word	0x080076e1
 800765c:	080076e1 	.word	0x080076e1
 8007660:	080076e1 	.word	0x080076e1
 8007664:	080076e1 	.word	0x080076e1
 8007668:	080076e1 	.word	0x080076e1
 800766c:	080076e1 	.word	0x080076e1
 8007670:	080076e1 	.word	0x080076e1
 8007674:	080076e1 	.word	0x080076e1
 8007678:	080076e1 	.word	0x080076e1
 800767c:	080076e1 	.word	0x080076e1
 8007680:	080076e1 	.word	0x080076e1
 8007684:	080076e1 	.word	0x080076e1
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076e1 	.word	0x080076e1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076e1 	.word	0x080076e1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e1 	.word	0x080076e1
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	080076e1 	.word	0x080076e1
 80076dc:	080076e1 	.word	0x080076e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076e0:	bf00      	nop
  }

  return (USBD_OK);
 80076e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4805      	ldr	r0, [pc, #20]	; (8007714 <CDC_Receive_FS+0x24>)
 80076fe:	f7fe fbc1 	bl	8005e84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007702:	4804      	ldr	r0, [pc, #16]	; (8007714 <CDC_Receive_FS+0x24>)
 8007704:	f7fe fc22 	bl	8005f4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007708:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000670 	.word	0x20000670

08007718 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007728:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <CDC_Transmit_FS+0x48>)
 800772a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800772e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800773a:	2301      	movs	r3, #1
 800773c:	e00b      	b.n	8007756 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	461a      	mov	r2, r3
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4806      	ldr	r0, [pc, #24]	; (8007760 <CDC_Transmit_FS+0x48>)
 8007746:	f7fe fb7b 	bl	8005e40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800774a:	4805      	ldr	r0, [pc, #20]	; (8007760 <CDC_Transmit_FS+0x48>)
 800774c:	f7fe fbb8 	bl	8005ec0 <USBD_CDC_TransmitPacket>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000670 	.word	0x20000670

08007764 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	6039      	str	r1, [r7, #0]
 8007792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2212      	movs	r2, #18
 8007798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	200000c8 	.word	0x200000c8

080077ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2204      	movs	r2, #4
 80077bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	200000dc 	.word	0x200000dc

080077d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <USBD_FS_ProductStrDescriptor+0x34>)
 80077e6:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_FS_ProductStrDescriptor+0x38>)
 80077e8:	f7ff fdf8 	bl	80073dc <USBD_GetString>
 80077ec:	e004      	b.n	80077f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <USBD_FS_ProductStrDescriptor+0x34>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <USBD_FS_ProductStrDescriptor+0x38>)
 80077f4:	f7ff fdf2 	bl	80073dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000194c 	.word	0x2000194c
 8007808:	08008050 	.word	0x08008050

0800780c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	4904      	ldr	r1, [pc, #16]	; (800782c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800781c:	4804      	ldr	r0, [pc, #16]	; (8007830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800781e:	f7ff fddd 	bl	80073dc <USBD_GetString>
  return USBD_StrDesc;
 8007822:	4b02      	ldr	r3, [pc, #8]	; (800782c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	2000194c 	.word	0x2000194c
 8007830:	08008068 	.word	0x08008068

08007834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	221a      	movs	r2, #26
 8007844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007846:	f000 f843 	bl	80078d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800784a:	4b02      	ldr	r3, [pc, #8]	; (8007854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200000e0 	.word	0x200000e0

08007858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4907      	ldr	r1, [pc, #28]	; (800788c <USBD_FS_ConfigStrDescriptor+0x34>)
 800786e:	4808      	ldr	r0, [pc, #32]	; (8007890 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007870:	f7ff fdb4 	bl	80073dc <USBD_GetString>
 8007874:	e004      	b.n	8007880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4904      	ldr	r1, [pc, #16]	; (800788c <USBD_FS_ConfigStrDescriptor+0x34>)
 800787a:	4805      	ldr	r0, [pc, #20]	; (8007890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800787c:	f7ff fdae 	bl	80073dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2000194c 	.word	0x2000194c
 8007890:	0800807c 	.word	0x0800807c

08007894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078aa:	4808      	ldr	r0, [pc, #32]	; (80078cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078ac:	f7ff fd96 	bl	80073dc <USBD_GetString>
 80078b0:	e004      	b.n	80078bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4904      	ldr	r1, [pc, #16]	; (80078c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078b6:	4805      	ldr	r0, [pc, #20]	; (80078cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078b8:	f7ff fd90 	bl	80073dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2000194c 	.word	0x2000194c
 80078cc:	08008088 	.word	0x08008088

080078d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <Get_SerialNum+0x44>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <Get_SerialNum+0x48>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078e2:	4b0e      	ldr	r3, [pc, #56]	; (800791c <Get_SerialNum+0x4c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078f6:	2208      	movs	r2, #8
 80078f8:	4909      	ldr	r1, [pc, #36]	; (8007920 <Get_SerialNum+0x50>)
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f814 	bl	8007928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007900:	2204      	movs	r2, #4
 8007902:	4908      	ldr	r1, [pc, #32]	; (8007924 <Get_SerialNum+0x54>)
 8007904:	68b8      	ldr	r0, [r7, #8]
 8007906:	f000 f80f 	bl	8007928 <IntToUnicode>
  }
}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	1fff7a10 	.word	0x1fff7a10
 8007918:	1fff7a14 	.word	0x1fff7a14
 800791c:	1fff7a18 	.word	0x1fff7a18
 8007920:	200000e2 	.word	0x200000e2
 8007924:	200000f2 	.word	0x200000f2

08007928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800793a:	2300      	movs	r3, #0
 800793c:	75fb      	strb	r3, [r7, #23]
 800793e:	e027      	b.n	8007990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0f1b      	lsrs	r3, r3, #28
 8007944:	2b09      	cmp	r3, #9
 8007946:	d80b      	bhi.n	8007960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4619      	mov	r1, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	440b      	add	r3, r1
 8007958:	3230      	adds	r2, #48	; 0x30
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e00a      	b.n	8007976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	0f1b      	lsrs	r3, r3, #28
 8007964:	b2da      	uxtb	r2, r3
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4619      	mov	r1, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	440b      	add	r3, r1
 8007970:	3237      	adds	r2, #55	; 0x37
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	3301      	adds	r3, #1
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	3301      	adds	r3, #1
 800798e:	75fb      	strb	r3, [r7, #23]
 8007990:	7dfa      	ldrb	r2, [r7, #23]
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	429a      	cmp	r2, r3
 8007996:	d3d3      	bcc.n	8007940 <IntToUnicode+0x18>
  }
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c8:	d13a      	bne.n	8007a40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ca:	2300      	movs	r3, #0
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	4b1e      	ldr	r3, [pc, #120]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	4a1d      	ldr	r2, [pc, #116]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	6313      	str	r3, [r2, #48]	; 0x30
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ec:	2302      	movs	r3, #2
 80079ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f4:	2303      	movs	r3, #3
 80079f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079f8:	230a      	movs	r3, #10
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fc:	f107 0314 	add.w	r3, r7, #20
 8007a00:	4619      	mov	r1, r3
 8007a02:	4812      	ldr	r0, [pc, #72]	; (8007a4c <HAL_PCD_MspInit+0xa4>)
 8007a04:	f7f9 f874 	bl	8000af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 8007a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0c:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 8007a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a12:	6353      	str	r3, [r2, #52]	; 0x34
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 8007a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a22:	6453      	str	r3, [r2, #68]	; 0x44
 8007a24:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_PCD_MspInit+0xa0>)
 8007a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	2043      	movs	r0, #67	; 0x43
 8007a36:	f7f9 f824 	bl	8000a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a3a:	2043      	movs	r0, #67	; 0x43
 8007a3c:	f7f9 f83d 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a40:	bf00      	nop
 8007a42:	3728      	adds	r7, #40	; 0x28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020000 	.word	0x40020000

08007a50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7fe fb59 	bl	800611e <USBD_LL_SetupStage>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f7fe fb93 	bl	80061c8 <USBD_LL_DataOutStage>
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	334c      	adds	r3, #76	; 0x4c
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f7fe fc2c 	bl	800632e <USBD_LL_DataInStage>
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fd60 	bl	80065b2 <USBD_LL_SOF>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b02:	2301      	movs	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
 8007b12:	e008      	b.n	8007b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d102      	bne.n	8007b22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
 8007b20:	e001      	b.n	8007b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b22:	f7f8 fd9f 	bl	8000664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b2c:	7bfa      	ldrb	r2, [r7, #15]
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fd00 	bl	8006536 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fca8 	bl	8006492 <USBD_LL_Reset>
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fcfb 	bl	8006556 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <HAL_PCD_SuspendCallback+0x48>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a03      	ldr	r2, [pc, #12]	; (8007b94 <HAL_PCD_SuspendCallback+0x48>)
 8007b86:	f043 0306 	orr.w	r3, r3, #6
 8007b8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fceb 	bl	8006582 <USBD_LL_Resume>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fd43 	bl	8006656 <USBD_LL_IsoOUTIncomplete>
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fcff 	bl	80065f2 <USBD_LL_IsoINIncomplete>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fd55 	bl	80066ba <USBD_LL_DevConnected>
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fd52 	bl	80066d0 <USBD_LL_DevDisconnected>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d13c      	bne.n	8007cbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c44:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a1e      	ldr	r2, [pc, #120]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c54:	4b1c      	ldr	r3, [pc, #112]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c5e:	2204      	movs	r2, #4
 8007c60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c62:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c64:	2202      	movs	r2, #2
 8007c66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c68:	4b17      	ldr	r3, [pc, #92]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c74:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c80:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c86:	4b10      	ldr	r3, [pc, #64]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c92:	480d      	ldr	r0, [pc, #52]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007c94:	f7f9 f8e1 	bl	8000e5a <HAL_PCD_Init>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c9e:	f7f8 fce1 	bl	8000664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ca2:	2180      	movs	r1, #128	; 0x80
 8007ca4:	4808      	ldr	r0, [pc, #32]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007ca6:	f7fa fb38 	bl	800231a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007caa:	2240      	movs	r2, #64	; 0x40
 8007cac:	2100      	movs	r1, #0
 8007cae:	4806      	ldr	r0, [pc, #24]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007cb0:	f7fa faec 	bl	800228c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <USBD_LL_Init+0x94>)
 8007cba:	f7fa fae7 	bl	800228c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20001b4c 	.word	0x20001b4c

08007ccc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f9 f9d6 	bl	8001094 <HAL_PCD_Start>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f942 	bl	8007f78 <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4603      	mov	r3, r0
 8007d12:	70fb      	strb	r3, [r7, #3]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70bb      	strb	r3, [r7, #2]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d2a:	78bb      	ldrb	r3, [r7, #2]
 8007d2c:	883a      	ldrh	r2, [r7, #0]
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	f7f9 fea7 	bl	8001a82 <HAL_PCD_EP_Open>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f91c 	bl	8007f78 <USBD_Get_USB_Status>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f9 fef0 	bl	8001b52 <HAL_PCD_EP_Close>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 f8fd 	bl	8007f78 <USBD_Get_USB_Status>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 ffc8 	bl	8001d40 <HAL_PCD_EP_SetStall>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f8de 	bl	8007f78 <USBD_Get_USB_Status>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fa f80d 	bl	8001e08 <HAL_PCD_EP_ClrStall>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f8bf 	bl	8007f78 <USBD_Get_USB_Status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da0b      	bge.n	8007e3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	333e      	adds	r3, #62	; 0x3e
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	e00b      	b.n	8007e54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	4613      	mov	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fdda 	bl	8001a38 <HAL_PCD_SetAddress>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f874 	bl	8007f78 <USBD_Get_USB_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ebc:	7af9      	ldrb	r1, [r7, #11]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f7f9 fef3 	bl	8001cac <HAL_PCD_EP_Transmit>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f853 	bl	8007f78 <USBD_Get_USB_Status>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ed6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	460b      	mov	r3, r1
 8007eee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007efe:	7af9      	ldrb	r1, [r7, #11]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f7f9 fe6f 	bl	8001be6 <HAL_PCD_EP_Receive>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f832 	bl	8007f78 <USBD_Get_USB_Status>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f18:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7f9 fe9f 	bl	8001c7c <HAL_PCD_EP_GetRxCount>
 8007f3e:	4603      	mov	r3, r0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <USBD_static_malloc+0x18>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20002058 	.word	0x20002058

08007f64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d817      	bhi.n	8007fbc <USBD_Get_USB_Status+0x44>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <USBD_Get_USB_Status+0x1c>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fab 	.word	0x08007fab
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fb7 	.word	0x08007fb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e00b      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007faa:	2303      	movs	r3, #3
 8007fac:	73fb      	strb	r3, [r7, #15]
    break;
 8007fae:	e008      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	e005      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fba:	e002      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	bf00      	nop
  }
  return usb_status;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	4d0d      	ldr	r5, [pc, #52]	; (8008008 <__libc_init_array+0x38>)
 8007fd4:	4c0d      	ldr	r4, [pc, #52]	; (800800c <__libc_init_array+0x3c>)
 8007fd6:	1b64      	subs	r4, r4, r5
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	2600      	movs	r6, #0
 8007fdc:	42a6      	cmp	r6, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	4d0b      	ldr	r5, [pc, #44]	; (8008010 <__libc_init_array+0x40>)
 8007fe2:	4c0c      	ldr	r4, [pc, #48]	; (8008014 <__libc_init_array+0x44>)
 8007fe4:	f000 f820 	bl	8008028 <_init>
 8007fe8:	1b64      	subs	r4, r4, r5
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	2600      	movs	r6, #0
 8007fee:	42a6      	cmp	r6, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff8:	4798      	blx	r3
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008002:	4798      	blx	r3
 8008004:	3601      	adds	r6, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	080080b0 	.word	0x080080b0
 800800c:	080080b0 	.word	0x080080b0
 8008010:	080080b0 	.word	0x080080b0
 8008014:	080080b4 	.word	0x080080b4

08008018 <memset>:
 8008018:	4402      	add	r2, r0
 800801a:	4603      	mov	r3, r0
 800801c:	4293      	cmp	r3, r2
 800801e:	d100      	bne.n	8008022 <memset+0xa>
 8008020:	4770      	bx	lr
 8008022:	f803 1b01 	strb.w	r1, [r3], #1
 8008026:	e7f9      	b.n	800801c <memset+0x4>

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
